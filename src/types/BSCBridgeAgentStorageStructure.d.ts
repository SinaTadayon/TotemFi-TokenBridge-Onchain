/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BSCBridgeAgentStorageStructureInterface
  extends ethers.utils.Interface {
  functions: {
    "bscBridgeAgentImpl()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakePair()": FunctionFragment;
    "pancakeswapRouter()": FunctionFragment;
    "proxyAdmin()": FunctionFragment;
    "slippagePercentage()": FunctionFragment;
    "swapDataMap(address,bytes32)": FunctionFragment;
    "totemToken()": FunctionFragment;
    "upgradeEnabled()": FunctionFragment;
    "wbnb()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bscBridgeAgentImpl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakePair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slippagePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapDataMap",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totemToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wbnb", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bscBridgeAgentImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slippagePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapDataMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totemToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wbnb", data: BytesLike): Result;

  events: {};
}

export class BSCBridgeAgentStorageStructure extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BSCBridgeAgentStorageStructureInterface;

  functions: {
    bscBridgeAgentImpl(overrides?: CallOverrides): Promise<[string]>;

    "bscBridgeAgentImpl()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pancakePair(overrides?: CallOverrides): Promise<[string]>;

    "pancakePair()"(overrides?: CallOverrides): Promise<[string]>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<[string]>;

    "pancakeswapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    proxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    slippagePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "slippagePercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
      }
    >;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
      }
    >;

    totemToken(overrides?: CallOverrides): Promise<[string]>;

    "totemToken()"(overrides?: CallOverrides): Promise<[string]>;

    upgradeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    wbnb(overrides?: CallOverrides): Promise<[string]>;

    "wbnb()"(overrides?: CallOverrides): Promise<[string]>;
  };

  bscBridgeAgentImpl(overrides?: CallOverrides): Promise<string>;

  "bscBridgeAgentImpl()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pancakePair(overrides?: CallOverrides): Promise<string>;

  "pancakePair()"(overrides?: CallOverrides): Promise<string>;

  pancakeswapRouter(overrides?: CallOverrides): Promise<string>;

  "pancakeswapRouter()"(overrides?: CallOverrides): Promise<string>;

  proxyAdmin(overrides?: CallOverrides): Promise<string>;

  "proxyAdmin()"(overrides?: CallOverrides): Promise<string>;

  slippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "slippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  swapDataMap(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      nonce: BigNumber;
      exchange: BigNumber;
      swapType: string;
    }
  >;

  "swapDataMap(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      nonce: BigNumber;
      exchange: BigNumber;
      swapType: string;
    }
  >;

  totemToken(overrides?: CallOverrides): Promise<string>;

  "totemToken()"(overrides?: CallOverrides): Promise<string>;

  upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

  "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  wbnb(overrides?: CallOverrides): Promise<string>;

  "wbnb()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bscBridgeAgentImpl(overrides?: CallOverrides): Promise<string>;

    "bscBridgeAgentImpl()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pancakePair(overrides?: CallOverrides): Promise<string>;

    "pancakePair()"(overrides?: CallOverrides): Promise<string>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<string>;

    "pancakeswapRouter()"(overrides?: CallOverrides): Promise<string>;

    proxyAdmin(overrides?: CallOverrides): Promise<string>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<string>;

    slippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "slippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
      }
    >;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
      }
    >;

    totemToken(overrides?: CallOverrides): Promise<string>;

    "totemToken()"(overrides?: CallOverrides): Promise<string>;

    upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    wbnb(overrides?: CallOverrides): Promise<string>;

    "wbnb()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bscBridgeAgentImpl(overrides?: CallOverrides): Promise<BigNumber>;

    "bscBridgeAgentImpl()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pancakePair(overrides?: CallOverrides): Promise<BigNumber>;

    "pancakePair()"(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "pancakeswapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    slippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "slippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totemToken(overrides?: CallOverrides): Promise<BigNumber>;

    "totemToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    wbnb(overrides?: CallOverrides): Promise<BigNumber>;

    "wbnb()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bscBridgeAgentImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bscBridgeAgentImpl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakePair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pancakePair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pancakeswapRouter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slippagePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slippagePercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totemToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totemToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "upgradeEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wbnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wbnb()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
