/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BSCBridgeAgentImplInterface extends ethers.utils.Interface {
  functions: {
    "bnbBalance()": FunctionFragment;
    "bnbWithdraw()": FunctionFragment;
    "bscBridgeAgentImpl()": FunctionFragment;
    "fillBNB2TOTMPegin(tuple,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakePair()": FunctionFragment;
    "pancakeswapRouter()": FunctionFragment;
    "proxyAdmin()": FunctionFragment;
    "setPancakePair(address)": FunctionFragment;
    "setSlippagePercentage(uint256)": FunctionFragment;
    "slippagePercentage()": FunctionFragment;
    "swapDataMap(address,bytes32)": FunctionFragment;
    "swapRouterQuery(uint256)": FunctionFragment;
    "totemBalance()": FunctionFragment;
    "totemToken()": FunctionFragment;
    "upgradeEnabled()": FunctionFragment;
    "wbnb()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bnbBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bnbWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bscBridgeAgentImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillBNB2TOTMPegin",
    values: [
      {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakePair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPancakePair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippagePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slippagePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapDataMap",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouterQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totemBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totemToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wbnb", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bnbBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bnbWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bscBridgeAgentImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillBNB2TOTMPegin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPancakePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippagePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slippagePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapDataMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapRouterQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totemBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totemToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wbnb", data: BytesLike): Result;

  events: {
    "swapFilled(address,bytes32,string,uint256,uint256,uint256,uint256)": EventFragment;
    "swapStarted(address,bytes32,string,string,string,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "swapFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "swapStarted"): EventFragment;
}

export class BSCBridgeAgentImpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BSCBridgeAgentImplInterface;

  functions: {
    bnbBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bnbBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bnbWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bnbWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bscBridgeAgentImpl(overrides?: CallOverrides): Promise<[string]>;

    "bscBridgeAgentImpl()"(overrides?: CallOverrides): Promise<[string]>;

    fillBNB2TOTMPegin(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      metisTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillBNB2TOTMPegin((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes32)"(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      metisTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pancakePair(overrides?: CallOverrides): Promise<[string]>;

    "pancakePair()"(overrides?: CallOverrides): Promise<[string]>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<[string]>;

    "pancakeswapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    proxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    setPancakePair(
      _pancakePair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPancakePair(address)"(
      _pancakePair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlippagePercentage(
      _slippagePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSlippagePercentage(uint256)"(
      _slippagePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slippagePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "slippagePercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
      }
    >;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
      }
    >;

    swapRouterQuery(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseReserved: BigNumber;
        quoteReserved: BigNumber;
        exchange: BigNumber;
      }
    >;

    "swapRouterQuery(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseReserved: BigNumber;
        quoteReserved: BigNumber;
        exchange: BigNumber;
      }
    >;

    totemBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totemBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totemToken(overrides?: CallOverrides): Promise<[string]>;

    "totemToken()"(overrides?: CallOverrides): Promise<[string]>;

    upgradeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    wbnb(overrides?: CallOverrides): Promise<[string]>;

    "wbnb()"(overrides?: CallOverrides): Promise<[string]>;
  };

  bnbBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "bnbBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  bnbWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bnbWithdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bscBridgeAgentImpl(overrides?: CallOverrides): Promise<string>;

  "bscBridgeAgentImpl()"(overrides?: CallOverrides): Promise<string>;

  fillBNB2TOTMPegin(
    message: {
      swapType: string;
      base: string;
      quote: string;
      amount: BigNumberish;
      fee: BigNumberish;
      exchange: BigNumberish;
      nonce: BigNumberish;
      deadline: BigNumberish;
      account: string;
    },
    metisTxHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillBNB2TOTMPegin((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes32)"(
    message: {
      swapType: string;
      base: string;
      quote: string;
      amount: BigNumberish;
      fee: BigNumberish;
      exchange: BigNumberish;
      nonce: BigNumberish;
      deadline: BigNumberish;
      account: string;
    },
    metisTxHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pancakePair(overrides?: CallOverrides): Promise<string>;

  "pancakePair()"(overrides?: CallOverrides): Promise<string>;

  pancakeswapRouter(overrides?: CallOverrides): Promise<string>;

  "pancakeswapRouter()"(overrides?: CallOverrides): Promise<string>;

  proxyAdmin(overrides?: CallOverrides): Promise<string>;

  "proxyAdmin()"(overrides?: CallOverrides): Promise<string>;

  setPancakePair(
    _pancakePair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPancakePair(address)"(
    _pancakePair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlippagePercentage(
    _slippagePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSlippagePercentage(uint256)"(
    _slippagePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "slippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  swapDataMap(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      nonce: BigNumber;
      exchange: BigNumber;
      swapType: string;
    }
  >;

  "swapDataMap(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      nonce: BigNumber;
      exchange: BigNumber;
      swapType: string;
    }
  >;

  swapRouterQuery(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      baseReserved: BigNumber;
      quoteReserved: BigNumber;
      exchange: BigNumber;
    }
  >;

  "swapRouterQuery(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      baseReserved: BigNumber;
      quoteReserved: BigNumber;
      exchange: BigNumber;
    }
  >;

  totemBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totemBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  totemToken(overrides?: CallOverrides): Promise<string>;

  "totemToken()"(overrides?: CallOverrides): Promise<string>;

  upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

  "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  wbnb(overrides?: CallOverrides): Promise<string>;

  "wbnb()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bnbBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "bnbBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    bnbWithdraw(overrides?: CallOverrides): Promise<void>;

    "bnbWithdraw()"(overrides?: CallOverrides): Promise<void>;

    bscBridgeAgentImpl(overrides?: CallOverrides): Promise<string>;

    "bscBridgeAgentImpl()"(overrides?: CallOverrides): Promise<string>;

    fillBNB2TOTMPegin(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      metisTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "fillBNB2TOTMPegin((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes32)"(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      metisTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pancakePair(overrides?: CallOverrides): Promise<string>;

    "pancakePair()"(overrides?: CallOverrides): Promise<string>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<string>;

    "pancakeswapRouter()"(overrides?: CallOverrides): Promise<string>;

    proxyAdmin(overrides?: CallOverrides): Promise<string>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<string>;

    setPancakePair(
      _pancakePair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPancakePair(address)"(
      _pancakePair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlippagePercentage(
      _slippagePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSlippagePercentage(uint256)"(
      _slippagePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "slippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
      }
    >;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
      }
    >;

    swapRouterQuery(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseReserved: BigNumber;
        quoteReserved: BigNumber;
        exchange: BigNumber;
      }
    >;

    "swapRouterQuery(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseReserved: BigNumber;
        quoteReserved: BigNumber;
        exchange: BigNumber;
      }
    >;

    totemBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totemBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totemToken(overrides?: CallOverrides): Promise<string>;

    "totemToken()"(overrides?: CallOverrides): Promise<string>;

    upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    wbnb(overrides?: CallOverrides): Promise<string>;

    "wbnb()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    swapFilled(
      recipient: string | null,
      metisTxHash: BytesLike | null,
      swapType: null,
      amount: null,
      fee: null,
      exchange: null,
      nonce: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        recipient: string;
        metisTxHash: string;
        swapType: string;
        amount: BigNumber;
        fee: BigNumber;
        exchange: BigNumber;
        nonce: BigNumber;
      }
    >;

    swapStarted(
      spender: string | null,
      metisTxHash: BytesLike | null,
      swapType: null,
      base: null,
      quote: null,
      amount: null,
      fee: null,
      exchange: null,
      nonce: null,
      deadline: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        spender: string;
        metisTxHash: string;
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumber;
        fee: BigNumber;
        exchange: BigNumber;
        nonce: BigNumber;
        deadline: BigNumber;
      }
    >;
  };

  estimateGas: {
    bnbBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "bnbBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    bnbWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bnbWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bscBridgeAgentImpl(overrides?: CallOverrides): Promise<BigNumber>;

    "bscBridgeAgentImpl()"(overrides?: CallOverrides): Promise<BigNumber>;

    fillBNB2TOTMPegin(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      metisTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillBNB2TOTMPegin((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes32)"(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      metisTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pancakePair(overrides?: CallOverrides): Promise<BigNumber>;

    "pancakePair()"(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "pancakeswapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPancakePair(
      _pancakePair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPancakePair(address)"(
      _pancakePair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlippagePercentage(
      _slippagePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSlippagePercentage(uint256)"(
      _slippagePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "slippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapRouterQuery(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapRouterQuery(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totemBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totemBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totemToken(overrides?: CallOverrides): Promise<BigNumber>;

    "totemToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    wbnb(overrides?: CallOverrides): Promise<BigNumber>;

    "wbnb()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bnbBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bnbBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnbWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bnbWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bscBridgeAgentImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bscBridgeAgentImpl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillBNB2TOTMPegin(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      metisTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillBNB2TOTMPegin((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes32)"(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      metisTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakePair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pancakePair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pancakeswapRouter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPancakePair(
      _pancakePair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPancakePair(address)"(
      _pancakePair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlippagePercentage(
      _slippagePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSlippagePercentage(uint256)"(
      _slippagePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slippagePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slippagePercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapRouterQuery(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapRouterQuery(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totemBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totemBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totemToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totemToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "upgradeEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wbnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wbnb()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
