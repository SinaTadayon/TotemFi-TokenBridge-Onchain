/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IGovernorINNImplInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "CONSENSUS_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FREEZE_ACCOUNT_SIGNATURE()": FunctionFragment;
    "TRANSFER_SIGNATURE()": FunctionFragment;
    "UNFREEZE_ACCOUNT_SIGNATURE()": FunctionFragment;
    "cancel(bytes32,string)": FunctionFragment;
    "castVote(string,bytes32,uint8)": FunctionFragment;
    "commissionWallet()": FunctionFragment;
    "disableValidator(address)": FunctionFragment;
    "execute(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasVoted(bytes32,address)": FunctionFragment;
    "hashProposal(bytes32,bytes32,address,uint8,uint8,bytes)": FunctionFragment;
    "initialize(address,address,address,address,string,string,string)": FunctionFragment;
    "innTokenAddress()": FunctionFragment;
    "isMigrationEnabled()": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "name()": FunctionFragment;
    "propose(tuple,bytes)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reservedWallet()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setMigration(bool)": FunctionFragment;
    "setVotingDelay(uint256)": FunctionFragment;
    "setVotingPeriod(uint256)": FunctionFragment;
    "state(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validatorCount()": FunctionFragment;
    "version()": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSENSUS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FREEZE_ACCOUNT_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNFREEZE_ACCOUNT_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableValidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [
      BytesLike,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "innTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMigrationEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reservedWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigration",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONSENSUS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FREEZE_ACCOUNT_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNFREEZE_ACCOUNT_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commissionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "innTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMigrationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservedWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ExitInvestmentProposalCreated(bytes32,address,address,uint256,bytes32,bytes32,string,uint16)": EventFragment;
    "FreezeInvestmentProposalCreated(bytes32,address,address,bytes32,bytes32)": EventFragment;
    "NewInvestmentProposalCreated(bytes32,address,address,uint256,bytes32,bytes32,string,uint16)": EventFragment;
    "NewValidatorProposalCreated(bytes32,address,address,bytes32,bytes32,string)": EventFragment;
    "ProposalCanceled(bytes32,string)": EventFragment;
    "ProposalExecuted(bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "UnfreezeInvestmentProposalCreated(bytes32,address,address,bytes32,bytes32)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VoteCast(address,bytes32,uint8,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExitInvestmentProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FreezeInvestmentProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewInvestmentProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewValidatorProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnfreezeInvestmentProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export class IGovernorINNImpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGovernorINNImplInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    CONSENSUS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CONSENSUS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    FREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<[string]>;

    "FREEZE_ACCOUNT_SIGNATURE()"(overrides?: CallOverrides): Promise<[string]>;

    TRANSFER_SIGNATURE(overrides?: CallOverrides): Promise<[string]>;

    "TRANSFER_SIGNATURE()"(overrides?: CallOverrides): Promise<[string]>;

    UNFREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<[string]>;

    "UNFREEZE_ACCOUNT_SIGNATURE()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    cancel(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancel(bytes32,string)"(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "castVote(string,bytes32,uint8)"(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commissionWallet(overrides?: CallOverrides): Promise<[string]>;

    "commissionWallet()"(overrides?: CallOverrides): Promise<[string]>;

    disableValidator(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disableValidator(address)"(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute(bytes32)"(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasVoted(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasVoted(bytes32,address)"(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "hashProposal(bytes32,bytes32,address,uint8,uint8,bytes)"(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      innTokenERC20: string,
      reservedEOA: string,
      commissionEOA: string,
      validatorEOA: string,
      validatorName: string,
      domainName: string,
      domainVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,string,string,string)"(
      innTokenERC20: string,
      reservedEOA: string,
      commissionEOA: string,
      validatorEOA: string,
      validatorName: string,
      domainName: string,
      domainVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    innTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "innTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    isMigrationEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "isMigrationEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    isValidator(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isValidator(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    propose(
      request: {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "propose((bytes32,uint8,uint8,string,bytes),bytes)"(
      request: {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservedWallet(overrides?: CallOverrides): Promise<[string]>;

    "reservedWallet()"(overrides?: CallOverrides): Promise<[string]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigration(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMigration(bool)"(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotingDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setVotingDelay(uint256)"(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotingPeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setVotingPeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(proposalId: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    "state(bytes32)"(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validatorCount(overrides?: CallOverrides): Promise<[number]>;

    "validatorCount()"(overrides?: CallOverrides): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;

    votingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votingDelay()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  CONSENSUS_ROLE(overrides?: CallOverrides): Promise<string>;

  "CONSENSUS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  FREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<string>;

  "FREEZE_ACCOUNT_SIGNATURE()"(overrides?: CallOverrides): Promise<string>;

  TRANSFER_SIGNATURE(overrides?: CallOverrides): Promise<string>;

  "TRANSFER_SIGNATURE()"(overrides?: CallOverrides): Promise<string>;

  UNFREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<string>;

  "UNFREEZE_ACCOUNT_SIGNATURE()"(overrides?: CallOverrides): Promise<string>;

  cancel(
    proposalId: BytesLike,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancel(bytes32,string)"(
    proposalId: BytesLike,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    reason: string,
    proposalId: BytesLike,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "castVote(string,bytes32,uint8)"(
    reason: string,
    proposalId: BytesLike,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commissionWallet(overrides?: CallOverrides): Promise<string>;

  "commissionWallet()"(overrides?: CallOverrides): Promise<string>;

  disableValidator(
    validator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disableValidator(address)"(
    validator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute(bytes32)"(
    proposalId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasVoted(
    proposalId: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasVoted(bytes32,address)"(
    proposalId: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashProposal(
    offchainID: BytesLike,
    descriptionHash: BytesLike,
    proposer: string,
    proposalType: BigNumberish,
    actionType: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "hashProposal(bytes32,bytes32,address,uint8,uint8,bytes)"(
    offchainID: BytesLike,
    descriptionHash: BytesLike,
    proposer: string,
    proposalType: BigNumberish,
    actionType: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    innTokenERC20: string,
    reservedEOA: string,
    commissionEOA: string,
    validatorEOA: string,
    validatorName: string,
    domainName: string,
    domainVersion: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,string,string,string)"(
    innTokenERC20: string,
    reservedEOA: string,
    commissionEOA: string,
    validatorEOA: string,
    validatorName: string,
    domainName: string,
    domainVersion: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  innTokenAddress(overrides?: CallOverrides): Promise<string>;

  "innTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  isMigrationEnabled(overrides?: CallOverrides): Promise<boolean>;

  "isMigrationEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  isValidator(addr: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidator(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  propose(
    request: {
      offchainID: BytesLike;
      proposalType: BigNumberish;
      actionType: BigNumberish;
      description: string;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "propose((bytes32,uint8,uint8,string,bytes),bytes)"(
    request: {
      offchainID: BytesLike;
      proposalType: BigNumberish;
      actionType: BigNumberish;
      description: string;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservedWallet(overrides?: CallOverrides): Promise<string>;

  "reservedWallet()"(overrides?: CallOverrides): Promise<string>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigration(
    migration: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMigration(bool)"(
    migration: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotingDelay(
    delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setVotingDelay(uint256)"(
    delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotingPeriod(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setVotingPeriod(uint256)"(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(proposalId: BytesLike, overrides?: CallOverrides): Promise<number>;

  "state(bytes32)"(
    proposalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validatorCount(overrides?: CallOverrides): Promise<number>;

  "validatorCount()"(overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    CONSENSUS_ROLE(overrides?: CallOverrides): Promise<string>;

    "CONSENSUS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    FREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<string>;

    "FREEZE_ACCOUNT_SIGNATURE()"(overrides?: CallOverrides): Promise<string>;

    TRANSFER_SIGNATURE(overrides?: CallOverrides): Promise<string>;

    "TRANSFER_SIGNATURE()"(overrides?: CallOverrides): Promise<string>;

    UNFREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<string>;

    "UNFREEZE_ACCOUNT_SIGNATURE()"(overrides?: CallOverrides): Promise<string>;

    cancel(
      proposalId: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "cancel(bytes32,string)"(
      proposalId: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    castVote(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "castVote(string,bytes32,uint8)"(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commissionWallet(overrides?: CallOverrides): Promise<string>;

    "commissionWallet()"(overrides?: CallOverrides): Promise<string>;

    disableValidator(
      validator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "disableValidator(address)"(
      validator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(proposalId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "execute(bytes32)"(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasVoted(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasVoted(bytes32,address)"(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "hashProposal(bytes32,bytes32,address,uint8,uint8,bytes)"(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      innTokenERC20: string,
      reservedEOA: string,
      commissionEOA: string,
      validatorEOA: string,
      validatorName: string,
      domainName: string,
      domainVersion: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,string,string,string)"(
      innTokenERC20: string,
      reservedEOA: string,
      commissionEOA: string,
      validatorEOA: string,
      validatorName: string,
      domainName: string,
      domainVersion: string,
      overrides?: CallOverrides
    ): Promise<void>;

    innTokenAddress(overrides?: CallOverrides): Promise<string>;

    "innTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    isMigrationEnabled(overrides?: CallOverrides): Promise<boolean>;

    "isMigrationEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    isValidator(addr: string, overrides?: CallOverrides): Promise<boolean>;

    "isValidator(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    propose(
      request: {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "propose((bytes32,uint8,uint8,string,bytes),bytes)"(
      request: {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reservedWallet(overrides?: CallOverrides): Promise<string>;

    "reservedWallet()"(overrides?: CallOverrides): Promise<string>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigration(migration: boolean, overrides?: CallOverrides): Promise<void>;

    "setMigration(bool)"(
      migration: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingDelay(
      delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVotingDelay(uint256)"(
      delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVotingPeriod(uint256)"(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(proposalId: BytesLike, overrides?: CallOverrides): Promise<number>;

    "state(bytes32)"(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorCount(overrides?: CallOverrides): Promise<number>;

    "validatorCount()"(overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AdminChanged(
      previousAdmin: null,
      newAdmin: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    BeaconUpgraded(
      beacon: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    ExitInvestmentProposalCreated(
      proposalId: BytesLike | null,
      proposer: string | null,
      validatorEOA: string | null,
      tokenOffer: null,
      offchainID: null,
      description: null,
      startupName: null,
      sharedStake: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, string, number],
      {
        proposalId: string;
        proposer: string;
        validatorEOA: string;
        tokenOffer: BigNumber;
        offchainID: string;
        description: string;
        startupName: string;
        sharedStake: number;
      }
    >;

    FreezeInvestmentProposalCreated(
      proposalId: BytesLike | null,
      proposer: string | null,
      account: string | null,
      offchainID: null,
      description: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        proposalId: string;
        proposer: string;
        account: string;
        offchainID: string;
        description: string;
      }
    >;

    NewInvestmentProposalCreated(
      proposalID: BytesLike | null,
      proposer: string | null,
      startupEOA: string | null,
      tokenOffer: null,
      offchainID: null,
      description: null,
      startupName: null,
      sharedStake: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, string, number],
      {
        proposalID: string;
        proposer: string;
        startupEOA: string;
        tokenOffer: BigNumber;
        offchainID: string;
        description: string;
        startupName: string;
        sharedStake: number;
      }
    >;

    NewValidatorProposalCreated(
      proposalID: BytesLike | null,
      proposer: string | null,
      validatorEOA: string | null,
      offchainID: null,
      description: null,
      validatorName: null
    ): TypedEventFilter<
      [string, string, string, string, string, string],
      {
        proposalID: string;
        proposer: string;
        validatorEOA: string;
        offchainID: string;
        description: string;
        validatorName: string;
      }
    >;

    ProposalCanceled(
      proposalId: BytesLike | null,
      reason: null
    ): TypedEventFilter<
      [string, string],
      { proposalId: string; reason: string }
    >;

    ProposalExecuted(
      proposalId: BytesLike | null
    ): TypedEventFilter<[string], { proposalId: string }>;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    UnfreezeInvestmentProposalCreated(
      proposalID: BytesLike | null,
      proposer: string | null,
      account: string | null,
      offchainID: null,
      description: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        proposalID: string;
        proposer: string;
        account: string;
        offchainID: string;
        description: string;
      }
    >;

    Upgraded(
      implementation: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    VoteCast(
      voter: string | null,
      proposalId: BytesLike | null,
      vote: null,
      reason: null
    ): TypedEventFilter<
      [string, string, number, string],
      { voter: string; proposalId: string; vote: number; reason: string }
    >;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONSENSUS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CONSENSUS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    FREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<BigNumber>;

    "FREEZE_ACCOUNT_SIGNATURE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_SIGNATURE(overrides?: CallOverrides): Promise<BigNumber>;

    "TRANSFER_SIGNATURE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNFREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<BigNumber>;

    "UNFREEZE_ACCOUNT_SIGNATURE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancel(bytes32,string)"(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "castVote(string,bytes32,uint8)"(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commissionWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "commissionWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    disableValidator(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disableValidator(address)"(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute(bytes32)"(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasVoted(bytes32,address)"(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashProposal(bytes32,bytes32,address,uint8,uint8,bytes)"(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      innTokenERC20: string,
      reservedEOA: string,
      commissionEOA: string,
      validatorEOA: string,
      validatorName: string,
      domainName: string,
      domainVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,string,string,string)"(
      innTokenERC20: string,
      reservedEOA: string,
      commissionEOA: string,
      validatorEOA: string,
      validatorName: string,
      domainName: string,
      domainVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    innTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "innTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMigrationEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "isMigrationEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    isValidator(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isValidator(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      request: {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "propose((bytes32,uint8,uint8,string,bytes),bytes)"(
      request: {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservedWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "reservedWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigration(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMigration(bool)"(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotingDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setVotingDelay(uint256)"(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotingPeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setVotingPeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(proposalId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "state(bytes32)"(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "validatorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONSENSUS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONSENSUS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FREEZE_ACCOUNT_SIGNATURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FREEZE_ACCOUNT_SIGNATURE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRANSFER_SIGNATURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TRANSFER_SIGNATURE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNFREEZE_ACCOUNT_SIGNATURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UNFREEZE_ACCOUNT_SIGNATURE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancel(bytes32,string)"(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "castVote(string,bytes32,uint8)"(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commissionWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "commissionWallet()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableValidator(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disableValidator(address)"(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute(bytes32)"(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasVoted(bytes32,address)"(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashProposal(bytes32,bytes32,address,uint8,uint8,bytes)"(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      innTokenERC20: string,
      reservedEOA: string,
      commissionEOA: string,
      validatorEOA: string,
      validatorName: string,
      domainName: string,
      domainVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,string,string,string)"(
      innTokenERC20: string,
      reservedEOA: string,
      commissionEOA: string,
      validatorEOA: string,
      validatorName: string,
      domainName: string,
      domainVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    innTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "innTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMigrationEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMigrationEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidator(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propose(
      request: {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "propose((bytes32,uint8,uint8,string,bytes),bytes)"(
      request: {
        offchainID: BytesLike;
        proposalType: BigNumberish;
        actionType: BigNumberish;
        description: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservedWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reservedWallet()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigration(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMigration(bool)"(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotingDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setVotingDelay(uint256)"(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotingPeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setVotingPeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(bytes32)"(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validatorCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
