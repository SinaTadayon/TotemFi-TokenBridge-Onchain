/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MetisBridgeAgentImplInterface extends ethers.utils.Interface {
  functions: {
    "claimMTS2TOTMPegIn(bytes32)": FunctionFragment;
    "domain()": FunctionFragment;
    "fillMTS2TOTMPegIn(address,bytes32,bytes32,string,uint256,uint256)": FunctionFragment;
    "metisBridgeAgentImpl()": FunctionFragment;
    "mtsBalance()": FunctionFragment;
    "mtsWithdraw()": FunctionFragment;
    "owner()": FunctionFragment;
    "pegInMTS2TOTM(tuple,bytes)": FunctionFragment;
    "peggedTotemTokenProxy()": FunctionFragment;
    "proxyAdmin()": FunctionFragment;
    "setClaim(address,bytes32,bool)": FunctionFragment;
    "setFill(address,bytes32,bool)": FunctionFragment;
    "setNonce(address,uint256)": FunctionFragment;
    "swapDataMap(address,bytes32)": FunctionFragment;
    "swapNonce(address)": FunctionFragment;
    "upgradeEnabled()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimMTS2TOTMPegIn",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fillMTS2TOTMPegIn",
    values: [string, BytesLike, BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "metisBridgeAgentImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mtsBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mtsWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pegInMTS2TOTM",
    values: [
      {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "peggedTotemTokenProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaim",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFill",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonce",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapDataMap",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "swapNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeEnabled",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimMTS2TOTMPegIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillMTS2TOTMPegIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metisBridgeAgentImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mtsBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mtsWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pegInMTS2TOTM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peggedTotemTokenProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapDataMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeEnabled",
    data: BytesLike
  ): Result;

  events: {
    "swapClaimed(address,bytes32,string,uint256)": EventFragment;
    "swapFilled(address,bytes32,bytes32,string,uint256,uint256)": EventFragment;
    "swapStarted(address,bytes32,string,string,string,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "swapClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "swapFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "swapStarted"): EventFragment;
}

export class MetisBridgeAgentImpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MetisBridgeAgentImplInterface;

  functions: {
    claimMTS2TOTMPegIn(
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimMTS2TOTMPegIn(bytes32)"(
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
      }
    >;

    "domain()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
      }
    >;

    fillMTS2TOTMPegIn(
      recipient: string,
      dataHash: BytesLike,
      bscTxHash: BytesLike,
      swapType: string,
      fee: BigNumberish,
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillMTS2TOTMPegIn(address,bytes32,bytes32,string,uint256,uint256)"(
      recipient: string,
      dataHash: BytesLike,
      bscTxHash: BytesLike,
      swapType: string,
      fee: BigNumberish,
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    metisBridgeAgentImpl(overrides?: CallOverrides): Promise<[string]>;

    "metisBridgeAgentImpl()"(overrides?: CallOverrides): Promise<[string]>;

    mtsBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mtsBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mtsWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mtsWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pegInMTS2TOTM(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pegInMTS2TOTM((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes)"(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    peggedTotemTokenProxy(overrides?: CallOverrides): Promise<[string]>;

    "peggedTotemTokenProxy()"(overrides?: CallOverrides): Promise<[string]>;

    proxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    setClaim(
      account: string,
      dataHash: BytesLike,
      claimStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setClaim(address,bytes32,bool)"(
      account: string,
      dataHash: BytesLike,
      claimStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFill(
      account: string,
      dataHash: BytesLike,
      fillStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFill(address,bytes32,bool)"(
      account: string,
      dataHash: BytesLike,
      fillStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNonce(
      account: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setNonce(address,uint256)"(
      account: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, boolean, boolean] & {
        txHash: string;
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
        isFilled: boolean;
        isClaimed: boolean;
      }
    >;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, boolean, boolean] & {
        txHash: string;
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
        isFilled: boolean;
        isClaimed: boolean;
      }
    >;

    swapNonce(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "swapNonce(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    upgradeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  claimMTS2TOTMPegIn(
    dataHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimMTS2TOTMPegIn(bytes32)"(
    dataHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
    }
  >;

  "domain()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
    }
  >;

  fillMTS2TOTMPegIn(
    recipient: string,
    dataHash: BytesLike,
    bscTxHash: BytesLike,
    swapType: string,
    fee: BigNumberish,
    exchange: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillMTS2TOTMPegIn(address,bytes32,bytes32,string,uint256,uint256)"(
    recipient: string,
    dataHash: BytesLike,
    bscTxHash: BytesLike,
    swapType: string,
    fee: BigNumberish,
    exchange: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  metisBridgeAgentImpl(overrides?: CallOverrides): Promise<string>;

  "metisBridgeAgentImpl()"(overrides?: CallOverrides): Promise<string>;

  mtsBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "mtsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  mtsWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mtsWithdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pegInMTS2TOTM(
    message: {
      swapType: string;
      base: string;
      quote: string;
      amount: BigNumberish;
      fee: BigNumberish;
      exchange: BigNumberish;
      nonce: BigNumberish;
      deadline: BigNumberish;
      account: string;
    },
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pegInMTS2TOTM((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes)"(
    message: {
      swapType: string;
      base: string;
      quote: string;
      amount: BigNumberish;
      fee: BigNumberish;
      exchange: BigNumberish;
      nonce: BigNumberish;
      deadline: BigNumberish;
      account: string;
    },
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  peggedTotemTokenProxy(overrides?: CallOverrides): Promise<string>;

  "peggedTotemTokenProxy()"(overrides?: CallOverrides): Promise<string>;

  proxyAdmin(overrides?: CallOverrides): Promise<string>;

  "proxyAdmin()"(overrides?: CallOverrides): Promise<string>;

  setClaim(
    account: string,
    dataHash: BytesLike,
    claimStat: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setClaim(address,bytes32,bool)"(
    account: string,
    dataHash: BytesLike,
    claimStat: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFill(
    account: string,
    dataHash: BytesLike,
    fillStat: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFill(address,bytes32,bool)"(
    account: string,
    dataHash: BytesLike,
    fillStat: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNonce(
    account: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setNonce(address,uint256)"(
    account: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapDataMap(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, boolean, boolean] & {
      txHash: string;
      nonce: BigNumber;
      exchange: BigNumber;
      swapType: string;
      isFilled: boolean;
      isClaimed: boolean;
    }
  >;

  "swapDataMap(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, boolean, boolean] & {
      txHash: string;
      nonce: BigNumber;
      exchange: BigNumber;
      swapType: string;
      isFilled: boolean;
      isClaimed: boolean;
    }
  >;

  swapNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "swapNonce(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

  "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    claimMTS2TOTMPegIn(
      dataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimMTS2TOTMPegIn(bytes32)"(
      dataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
      }
    >;

    "domain()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
      }
    >;

    fillMTS2TOTMPegIn(
      recipient: string,
      dataHash: BytesLike,
      bscTxHash: BytesLike,
      swapType: string,
      fee: BigNumberish,
      exchange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "fillMTS2TOTMPegIn(address,bytes32,bytes32,string,uint256,uint256)"(
      recipient: string,
      dataHash: BytesLike,
      bscTxHash: BytesLike,
      swapType: string,
      fee: BigNumberish,
      exchange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    metisBridgeAgentImpl(overrides?: CallOverrides): Promise<string>;

    "metisBridgeAgentImpl()"(overrides?: CallOverrides): Promise<string>;

    mtsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "mtsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    mtsWithdraw(overrides?: CallOverrides): Promise<void>;

    "mtsWithdraw()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pegInMTS2TOTM(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "pegInMTS2TOTM((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes)"(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    peggedTotemTokenProxy(overrides?: CallOverrides): Promise<string>;

    "peggedTotemTokenProxy()"(overrides?: CallOverrides): Promise<string>;

    proxyAdmin(overrides?: CallOverrides): Promise<string>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<string>;

    setClaim(
      account: string,
      dataHash: BytesLike,
      claimStat: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaim(address,bytes32,bool)"(
      account: string,
      dataHash: BytesLike,
      claimStat: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFill(
      account: string,
      dataHash: BytesLike,
      fillStat: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFill(address,bytes32,bool)"(
      account: string,
      dataHash: BytesLike,
      fillStat: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setNonce(
      account: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNonce(address,uint256)"(
      account: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, boolean, boolean] & {
        txHash: string;
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
        isFilled: boolean;
        isClaimed: boolean;
      }
    >;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, boolean, boolean] & {
        txHash: string;
        nonce: BigNumber;
        exchange: BigNumber;
        swapType: string;
        isFilled: boolean;
        isClaimed: boolean;
      }
    >;

    swapNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "swapNonce(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    swapClaimed(
      recipient: string | null,
      dataHash: BytesLike | null,
      swapType: null,
      exchange: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        recipient: string;
        dataHash: string;
        swapType: string;
        exchange: BigNumber;
      }
    >;

    swapFilled(
      recipient: string | null,
      bscTxHash: BytesLike | null,
      dataHash: BytesLike | null,
      swapType: null,
      fee: null,
      exchange: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        recipient: string;
        bscTxHash: string;
        dataHash: string;
        swapType: string;
        fee: BigNumber;
        exchange: BigNumber;
      }
    >;

    swapStarted(
      spender: string | null,
      dataHash: BytesLike | null,
      swapType: null,
      base: null,
      quote: null,
      amount: null,
      fee: null,
      exchange: null,
      nonce: null,
      deadline: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        spender: string;
        dataHash: string;
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumber;
        fee: BigNumber;
        exchange: BigNumber;
        nonce: BigNumber;
        deadline: BigNumber;
      }
    >;
  };

  estimateGas: {
    claimMTS2TOTMPegIn(
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimMTS2TOTMPegIn(bytes32)"(
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    "domain()"(overrides?: CallOverrides): Promise<BigNumber>;

    fillMTS2TOTMPegIn(
      recipient: string,
      dataHash: BytesLike,
      bscTxHash: BytesLike,
      swapType: string,
      fee: BigNumberish,
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillMTS2TOTMPegIn(address,bytes32,bytes32,string,uint256,uint256)"(
      recipient: string,
      dataHash: BytesLike,
      bscTxHash: BytesLike,
      swapType: string,
      fee: BigNumberish,
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    metisBridgeAgentImpl(overrides?: CallOverrides): Promise<BigNumber>;

    "metisBridgeAgentImpl()"(overrides?: CallOverrides): Promise<BigNumber>;

    mtsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "mtsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    mtsWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mtsWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pegInMTS2TOTM(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pegInMTS2TOTM((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes)"(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    peggedTotemTokenProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "peggedTotemTokenProxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClaim(
      account: string,
      dataHash: BytesLike,
      claimStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setClaim(address,bytes32,bool)"(
      account: string,
      dataHash: BytesLike,
      claimStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFill(
      account: string,
      dataHash: BytesLike,
      fillStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFill(address,bytes32,bool)"(
      account: string,
      dataHash: BytesLike,
      fillStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNonce(
      account: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setNonce(address,uint256)"(
      account: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "swapNonce(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimMTS2TOTMPegIn(
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimMTS2TOTMPegIn(bytes32)"(
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domain()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillMTS2TOTMPegIn(
      recipient: string,
      dataHash: BytesLike,
      bscTxHash: BytesLike,
      swapType: string,
      fee: BigNumberish,
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillMTS2TOTMPegIn(address,bytes32,bytes32,string,uint256,uint256)"(
      recipient: string,
      dataHash: BytesLike,
      bscTxHash: BytesLike,
      swapType: string,
      fee: BigNumberish,
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    metisBridgeAgentImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "metisBridgeAgentImpl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mtsBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mtsBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mtsWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mtsWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegInMTS2TOTM(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pegInMTS2TOTM((string,string,string,uint256,uint256,uint256,uint256,uint256,address),bytes)"(
      message: {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumberish;
        fee: BigNumberish;
        exchange: BigNumberish;
        nonce: BigNumberish;
        deadline: BigNumberish;
        account: string;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    peggedTotemTokenProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "peggedTotemTokenProxy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxyAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaim(
      account: string,
      dataHash: BytesLike,
      claimStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setClaim(address,bytes32,bool)"(
      account: string,
      dataHash: BytesLike,
      claimStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFill(
      account: string,
      dataHash: BytesLike,
      fillStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFill(address,bytes32,bool)"(
      account: string,
      dataHash: BytesLike,
      fillStat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNonce(
      account: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setNonce(address,uint256)"(
      account: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapDataMap(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapDataMap(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapNonce(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "upgradeEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
