/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SignatureVerificationInterface extends ethers.utils.Interface {
  functions: {
    "domain()": FunctionFragment;
    "message()": FunctionFragment;
    "setDomain(string,string,uint256,address)": FunctionFragment;
    "setMessage(address,uint256,uint256,uint256,uint256,uint256,string,string,string)": FunctionFragment;
    "verify(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(functionFragment: "message", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDomain",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessage",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "message", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDomain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export class SignatureVerification extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SignatureVerificationInterface;

  functions: {
    domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
      }
    >;

    "domain()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
      }
    >;

    message(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumber;
        fee: BigNumber;
        exchange: BigNumber;
        nonce: BigNumber;
        deadline: BigNumber;
        account: string;
      }
    >;

    "message()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumber;
        fee: BigNumber;
        exchange: BigNumber;
        nonce: BigNumber;
        deadline: BigNumber;
        account: string;
      }
    >;

    setDomain(
      name: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDomain(string,string,uint256,address)"(
      name: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessage(
      account: string,
      amount: BigNumberish,
      fee: BigNumberish,
      exchange: BigNumberish,
      nonce: BigNumberish,
      deadline: BigNumberish,
      swapType: string,
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMessage(address,uint256,uint256,uint256,uint256,uint256,string,string,string)"(
      account: string,
      amount: BigNumberish,
      fee: BigNumberish,
      exchange: BigNumberish,
      nonce: BigNumberish,
      deadline: BigNumberish,
      swapType: string,
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      _signer: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verify(address,bytes)"(
      _signer: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
    }
  >;

  "domain()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
    }
  >;

  message(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      swapType: string;
      base: string;
      quote: string;
      amount: BigNumber;
      fee: BigNumber;
      exchange: BigNumber;
      nonce: BigNumber;
      deadline: BigNumber;
      account: string;
    }
  >;

  "message()"(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      swapType: string;
      base: string;
      quote: string;
      amount: BigNumber;
      fee: BigNumber;
      exchange: BigNumber;
      nonce: BigNumber;
      deadline: BigNumber;
      account: string;
    }
  >;

  setDomain(
    name: string,
    version: string,
    chainId: BigNumberish,
    verifyingContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDomain(string,string,uint256,address)"(
    name: string,
    version: string,
    chainId: BigNumberish,
    verifyingContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessage(
    account: string,
    amount: BigNumberish,
    fee: BigNumberish,
    exchange: BigNumberish,
    nonce: BigNumberish,
    deadline: BigNumberish,
    swapType: string,
    base: string,
    quote: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMessage(address,uint256,uint256,uint256,uint256,uint256,string,string,string)"(
    account: string,
    amount: BigNumberish,
    fee: BigNumberish,
    exchange: BigNumberish,
    nonce: BigNumberish,
    deadline: BigNumberish,
    swapType: string,
    base: string,
    quote: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    _signer: string,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verify(address,bytes)"(
    _signer: string,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
      }
    >;

    "domain()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
      }
    >;

    message(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumber;
        fee: BigNumber;
        exchange: BigNumber;
        nonce: BigNumber;
        deadline: BigNumber;
        account: string;
      }
    >;

    "message()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        swapType: string;
        base: string;
        quote: string;
        amount: BigNumber;
        fee: BigNumber;
        exchange: BigNumber;
        nonce: BigNumber;
        deadline: BigNumber;
        account: string;
      }
    >;

    setDomain(
      name: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDomain(string,string,uint256,address)"(
      name: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessage(
      account: string,
      amount: BigNumberish,
      fee: BigNumberish,
      exchange: BigNumberish,
      nonce: BigNumberish,
      deadline: BigNumberish,
      swapType: string,
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMessage(address,uint256,uint256,uint256,uint256,uint256,string,string,string)"(
      account: string,
      amount: BigNumberish,
      fee: BigNumberish,
      exchange: BigNumberish,
      nonce: BigNumberish,
      deadline: BigNumberish,
      swapType: string,
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      _signer: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verify(address,bytes)"(
      _signer: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    domain(overrides?: CallOverrides): Promise<BigNumber>;

    "domain()"(overrides?: CallOverrides): Promise<BigNumber>;

    message(overrides?: CallOverrides): Promise<BigNumber>;

    "message()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDomain(
      name: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDomain(string,string,uint256,address)"(
      name: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessage(
      account: string,
      amount: BigNumberish,
      fee: BigNumberish,
      exchange: BigNumberish,
      nonce: BigNumberish,
      deadline: BigNumberish,
      swapType: string,
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMessage(address,uint256,uint256,uint256,uint256,uint256,string,string,string)"(
      account: string,
      amount: BigNumberish,
      fee: BigNumberish,
      exchange: BigNumberish,
      nonce: BigNumberish,
      deadline: BigNumberish,
      swapType: string,
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      _signer: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify(address,bytes)"(
      _signer: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domain()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    message(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "message()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDomain(
      name: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDomain(string,string,uint256,address)"(
      name: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessage(
      account: string,
      amount: BigNumberish,
      fee: BigNumberish,
      exchange: BigNumberish,
      nonce: BigNumberish,
      deadline: BigNumberish,
      swapType: string,
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMessage(address,uint256,uint256,uint256,uint256,uint256,string,string,string)"(
      account: string,
      amount: BigNumberish,
      fee: BigNumberish,
      exchange: BigNumberish,
      nonce: BigNumberish,
      deadline: BigNumberish,
      swapType: string,
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _signer: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify(address,bytes)"(
      _signer: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
