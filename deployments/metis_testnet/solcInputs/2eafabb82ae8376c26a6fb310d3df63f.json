{
  "language": "Solidity",
  "sources": {
    "contracts/BSCAgent/BSCBridgeAgentImpl.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./BSCBridgeAgentStorageStructure.sol\";\nimport \"../interfaces/IBscBridgeAgent.sol\";\n\ncontract BSCBridgeAgentImpl is BSCBridgeAgentStorageStructure, IBscBridgeAgent {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"can only be called by the proxy admin\");\n        _;\n    }\n\n    modifier notContract() {\n        require(!isContract(msg.sender), \"contract is not allowed to swap\");\n        require(msg.sender == tx.origin, \"no proxy contract is allowed\");\n        _;\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n\n    function fillBNB2TOTMPegin(Message memory message, bytes32 metisTxHash)\n        external\n        onlyOwner\n    {\n        require(bnbBalance() >= message.amount, \"insufficient amount\");\n\n        require(message.deadline >= block.timestamp, \"deadline has passed\");\n\n        require(\n            swapDataMap[message.account][metisTxHash].nonce == 0,\n            \"already registered\"\n        );\n\n        emit swapStarted(\n            message.account,\n            metisTxHash,\n            message.swapType,\n            message.base,\n            message.quote,\n            message.amount,\n            message.fee,\n            message.exchange,\n            message.nonce,\n            message.deadline\n        );\n\n        IERC20Upgradeable(wbnb).approve(\n            address(pancakeswapRouter),\n            message.amount\n        );\n\n        (, , uint256 exchangeAmount) = swapRouterQuery(message.amount);\n\n        uint256 exchangeAmountWithSlippage = exchangeAmount -\n            (exchangeAmount * slippagePercentage) /\n            10000;\n\n        uint256 totalTotemBalance = totemBalance();\n\n        IPancakeRouter02(pancakeswapRouter).swapExactTokensForTokens(\n            message.amount,\n            exchangeAmountWithSlippage,\n            _getPathForWbnb2Totem(),\n            address(this),\n            message.deadline\n        );\n\n        message.exchange = totemBalance() - totalTotemBalance; // the exact totem amount that was bought\n\n        SwapData memory swapData = SwapData(\n            message.nonce,\n            message.exchange,\n            message.swapType\n        );\n\n        swapDataMap[message.account][metisTxHash] = swapData;\n\n        emit swapFilled(\n            message.account,\n            metisTxHash,\n            message.swapType,\n            message.amount,\n            message.fee,\n            message.exchange,\n            message.nonce\n        );\n    }\n\n    function swapRouterQuery(uint256 amount)\n        public\n        view\n        returns (\n            uint256 baseReserved,\n            uint256 quoteReserved,\n            uint256 exchange\n        )\n    {\n        uint256[] memory amounts = IPancakeRouter02(pancakeswapRouter)\n            .getAmountsOut(amount, _getPathForWbnb2Totem());\n\n        exchange = amounts[1];\n\n        (quoteReserved, baseReserved, ) = IPancakePair(pancakePair)\n            .getReserves();\n    }\n\n    function _getPathForWbnb2Totem() internal view returns (address[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = wbnb;\n        path[1] = totemToken;\n\n        return path;\n    }\n\n    function bnbBalance() public view returns (uint256) {\n        return IERC20Upgradeable(wbnb).balanceOf(address(this));\n    }\n\n    function bnbWithdraw() external onlyOwner {\n        IERC20Upgradeable(wbnb).safeTransfer(owner, bnbBalance());\n    }\n\n    function totemBalance() public view returns (uint256) {\n        return IERC20Upgradeable(totemToken).balanceOf(address(this));\n    }\n\n    function setSlippagePercentage(uint256 _slippagePercentage)\n        external\n        onlyOwner\n    {\n        /// @dev it must be in basis points\n        slippagePercentage = _slippagePercentage;\n    }\n\n    function setPancakePair(address _pancakePair) external onlyOwner {\n        pancakePair = _pancakePair;\n    }\n}\n"
    },
    "contracts/BSCAgent/BSCBridgeAgentStorageStructure.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"../interfaces/IMessageStructure.sol\";\nimport \"../interfaces/IPancakeRouter.sol\";\nimport \"../interfaces/IPancakePair.sol\";\nimport \"../libraries/VerifySignature.sol\";\n\ncontract BSCBridgeAgentStorageStructure is\n    IMessageStructure,\n    Initializable,\n    ContextUpgradeable\n{\n    struct SwapData {\n        uint256 nonce;\n        uint256 exchange;\n        string swapType;\n    }\n\n    address public bscBridgeAgentImpl;\n    address public proxyAdmin;\n    address public owner;\n    address public wbnb;\n    address public totemToken;\n    address public pancakeswapRouter;\n    address public pancakePair;\n\n    uint256 public slippagePercentage;\n\n    bool public upgradeEnabled;\n\n    // Message public message;\n    // DomainSeparator public domain;\n\n    /*\n     * map (address => mapping(txhash => SwapData)))\n     */\n    mapping(address => mapping(bytes32 => SwapData)) public swapDataMap;\n}\n"
    },
    "contracts/interfaces/IBscBridgeAgent.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./IMessageStructure.sol\";\n\ninterface IBscBridgeAgent {\n    event swapStarted(\n        address indexed spender,\n        bytes32 indexed metisTxHash,\n        string swapType,\n        string base,\n        string quote,\n        uint256 amount,\n        uint256 fee,\n        uint256 exchange,\n        uint256 nonce,\n        uint256 deadline\n    );\n\n    event swapFilled(\n        address indexed recipient,\n        bytes32 indexed metisTxHash,\n        string swapType,\n        uint256 amount,\n        uint256 fee,\n        uint256 exchange,\n        uint256 nonce\n    );\n\n    function fillBNB2TOTMPegin(\n        IMessageStructure.Message memory message,\n        bytes32 metisTxHash\n    ) external;\n\n    function swapRouterQuery(uint256 amount)\n        external\n        returns (\n            uint256 baseReserved,\n            uint256 quoteReserved,\n            uint256 exchange\n        );\n\n    function bnbBalance() external returns (uint256);\n\n    function bnbWithdraw() external;\n\n    function totemBalance() external view returns (uint256);\n\n    function setSlippagePercentage(uint256 _slippagePercentage) external;\n\n    function setPancakePair(address _pancakePair) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IMessageStructure.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IMessageStructure {\n    struct Message {\n        string swapType;\n        string base; // MTS\n        string quote; // TOTM\n        uint256 amount; // metis amount\n        uint256 fee; // fee in totem\n        uint256 exchange; // totem amount\n        uint256 nonce;\n        uint256 deadline;\n        address account;    \n    }\n\n    struct DomainSeparator {\n        string name;\n        string version;\n        uint256 chainId;\n        address verifyingContract;\n    }\n}\n"
    },
    "contracts/interfaces/IPancakeRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IPancakeRouter01 {\n    function factory() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\ninterface IPancakePair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/libraries/VerifySignature.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"../interfaces/IMessageStructure.sol\";\n\nlibrary VerifySignature {\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\n        keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n\n    bytes32 private constant MESSAGE_TYPEHASH =\n        keccak256(\n            \"Bridge(string swapType,address account,string base,string quote,uint256 fee,uint256 amount,uint256 exchange,uint256 deadline,uint256 nonce)\"\n        );\n\n    function getMessageHash(IMessageStructure.Message memory _message)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    MESSAGE_TYPEHASH,\n                    keccak256(abi.encodePacked(_message.swapType)),\n                    _message.account,\n                    keccak256(abi.encodePacked(_message.base)),\n                    keccak256(abi.encodePacked(_message.quote)),\n                    _message.fee,\n                    _message.amount,\n                    _message.exchange,\n                    _message.deadline,\n                    _message.nonce\n                )\n            );\n    }\n\n    function getDomainSeparatorHash(\n        IMessageStructure.DomainSeparator memory _domain\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    EIP712_DOMAIN_TYPEHASH,\n                    keccak256(abi.encodePacked(_domain.name)),\n                    keccak256(abi.encodePacked(_domain.version)),\n                    _domain.chainId,\n                    _domain.verifyingContract\n                )\n            );\n    }\n\n    function getEthSignedMessageHash(bytes32 _domainHash, bytes32 _messageHash)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(abi.encodePacked(\"\\x19\\x01\", _domainHash, _messageHash));\n    }\n\n    function verify(\n        address _signer,\n        IMessageStructure.Message memory _message,\n        IMessageStructure.DomainSeparator memory _domain,\n        bytes memory signature\n    ) internal pure returns (bool) {\n        bytes32 domainHash = getDomainSeparatorHash(_domain);\n        bytes32 messageHash = getMessageHash(_message);\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(\n            domainHash,\n            messageHash\n        );\n\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\n    }\n\n    function recoverSigner(\n        bytes32 _ethSignedMessageHash,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    function splitSignature(bytes memory sig)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/SignatureVerification.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../libraries/VerifySignature.sol\";\nimport \"../interfaces/IMessageStructure.sol\";\n\ncontract SignatureVerification {\n    IMessageStructure.Message public message;\n    IMessageStructure.DomainSeparator public domain;\n\n    function setMessage(\n        address account,\n        uint256 amount,\n        uint256 fee,\n        uint256 exchange,\n        uint256 nonce,\n        uint256 deadline,\n        string memory swapType,\n        string memory base,\n        string memory quote\n    ) public {\n        message = IMessageStructure.Message({\n            account: account,\n            amount: amount,\n            fee: fee,\n            exchange: exchange,\n            nonce: nonce,\n            deadline: deadline,\n            swapType: swapType,\n            base: base,\n            quote: quote\n        });\n    }\n\n    function setDomain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    ) public {\n        domain = IMessageStructure.DomainSeparator({\n            chainId: chainId,\n            verifyingContract: verifyingContract,\n            name: name,\n            version: version\n        });\n    }\n\n    function verify(address _signer, bytes memory _signature)\n        public\n        view\n        returns (bool)\n    {\n        return VerifySignature.verify(_signer, message, domain, _signature);\n    }\n}\n"
    },
    "contracts/MetisAgent/MetisBridgeAgentStorageStructure.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"../interfaces/IPeggedTotemToken.sol\";\nimport \"../interfaces/IMessageStructure.sol\";\nimport \"../libraries/VerifySignature.sol\";\n\ncontract MetisBridgeAgentStorageStructure is\n    IMessageStructure,\n    Initializable,\n    ContextUpgradeable\n{\n    struct SwapData {\n        bytes32 txHash;\n        uint256 nonce;\n        uint256 exchange;\n        string swapType;\n        bool isFilled;\n        bool isClaimed;\n    }\n\n    address public metisBridgeAgentImpl;\n    address public proxyAdmin;\n    address public peggedTotemTokenProxy;\n    address payable public owner;\n\n    bool public upgradeEnabled;\n\n    // Message public message;\n    DomainSeparator public domain;\n\n    mapping(address => uint256) public swapNonce;\n    /**\n     * @dev This will be set to true if the required amount of pTOTM is minted for the user\n     *      the txn hash is from the fillPegIn function from BSCBridgeAgent\n     *\n     * map (address => mapping(dataHash => SwapData)))\n     */\n    mapping(address => mapping(bytes32 => SwapData)) public swapDataMap;\n}\n"
    },
    "contracts/interfaces/IPeggedTotemToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\";\nimport \"./ILocker.sol\";\n\ninterface IPeggedTotemToken is\n    IERC20Upgradeable,\n    IAccessControlUpgradeable,\n    ILocker\n{\n    function setLocker(address _locker) external;\n\n    function setTaxRate(uint256 newTaxRate) external;\n\n    function setTaxExemptStatus(address account, bool status) external;\n\n    function setTaxationWallet(address newTaxationWallet) external;\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function mintTo(address recipient, uint256 amount) external returns (bool);\n\n    function burnFrom(address account, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/interfaces/ILocker.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ILocker {\n    /**\n     * @dev Fails if transaction is not allowed.\n     * Return values can be ignored for AntiBot launches\n     */\n    function lockOrGetPenalty(address source, address dest)\n        external\n        returns (bool, uint256);\n}\n\ninterface ILockerUser {\n    function locker() external view returns (ILocker);\n\n    /**\n     * @dev Emitted when setLocker is called.\n     */\n    event SetLocker(address indexed locker);\n}\n\n"
    },
    "contracts/MetisAgent/MetisBridgeAgentProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./MetisBridgeAgentStorageStructure.sol\";\n\ncontract MetisBridgeAgentProxy is MetisBridgeAgentStorageStructure {\n    event ImplementationUpgraded(address oldImpl, address newImpl);\n\n    modifier onlyProxyAdmin() {\n        require(\n            _msgSender() == proxyAdmin,\n            \"can only be called by the proxy admin\"\n        );\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"can only be called by the proxy admin\");\n        _;\n    }\n\n    constructor(address _proxyAdmin) {\n        upgradeEnabled = true;\n        proxyAdmin = _proxyAdmin;\n        owner = payable(_msgSender());\n    }\n\n    function upgradeTo(address _newMetisBridgeAgentImpl) external onlyOwner {\n        require(upgradeEnabled, \"Upgrade is not enabled yet\");\n        require(\n            metisBridgeAgentImpl != _newMetisBridgeAgentImpl,\n            \"Is already the implementation\"\n        );\n        _setMetisBridgeAgentImpl(_newMetisBridgeAgentImpl);\n        upgradeEnabled = false;\n    }\n\n    function enableUpgrade() external onlyProxyAdmin {\n        upgradeEnabled = true;\n    }\n\n    function disableUpgrade() external onlyProxyAdmin {\n        upgradeEnabled = false;\n    }\n\n    function initialize(\n        string memory _name,\n        string memory _version,\n        address _peggedTotemTokenProxy\n    ) public initializer onlyOwner {\n        ContextUpgradeable.__Context_init();\n\n        domain.name = _name;\n        domain.version = _version;\n        domain.chainId = block.chainid;\n        domain.verifyingContract = address(this);\n\n        peggedTotemTokenProxy = _peggedTotemTokenProxy;\n    }\n\n    function _setMetisBridgeAgentImpl(address _newMetisBridgeAgentImpl)\n        internal\n    {\n        address oldImpl = metisBridgeAgentImpl;\n        metisBridgeAgentImpl = _newMetisBridgeAgentImpl;\n        emit ImplementationUpgraded(oldImpl, metisBridgeAgentImpl);\n    }\n\n    fallback() external payable {\n        address opr = metisBridgeAgentImpl;\n        require(opr != address(0));\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), opr, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/PeggedToken/PeggedTotemTokenStorageStructure.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../interfaces/ILocker.sol\";\nimport \"../libraries/BasisPoints.sol\";\n\ncontract PeggedTotemTokenStorageStructure is\n    ILockerUser,\n    ERC20Upgradeable,\n    AccessControlUpgradeable\n{\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant SWAPPER_ROLE = keccak256(\"SWAPPER_ROLE\");\n    uint256 public taxRate = 300;\n    bool public upgradeEnabled;\n    address public taxationWallet;\n    address public peggedTotemTokenImpl;\n    address public proxyAdmin;\n    address public owner;\n    ILocker public override locker;\n    mapping(address => bool) public taxExempt;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/libraries/BasisPoints.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nlibrary BasisPoints {\n\n    uint256 private constant BASIS_POINTS = 10000;\n\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\n        return (amt * bp)/(BASIS_POINTS);\n    }\n\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\n        require(bp > 0, \"Cannot divide by zero.\");\n        return (amt * BASIS_POINTS)/(bp);\n    }\n\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\n        if (amt == 0) return 0;\n        if (bp == 0) return amt;\n        return amt + (mulBP(amt, bp));\n    }\n\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\n        if (amt == 0) return 0;\n        if (bp == 0) return amt;\n        return amt - (mulBP(amt, bp));\n    }\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/PeggedToken/PeggedTotemTokenProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./PeggedTotemTokenStorageStructure.sol\";\n\ncontract PeggedTotemTokenProxy is PeggedTotemTokenStorageStructure {\n    event ImplementationUpgraded(address oldImpl, address newImpl);\n\n    modifier onlyProxyAdmin() {\n        require(\n            _msgSender() == proxyAdmin,\n            \"can only be called by the proxy admin\"\n        );\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"can only be called by the proxy admin\");\n        _;\n    }\n\n    constructor(address _proxyAdmin) {\n        upgradeEnabled = true;\n        proxyAdmin = _proxyAdmin;\n        owner = _msgSender();\n    }\n\n    function upgradeTo(address _newPeggedTotemTokenImpl) external onlyOwner {\n        require(upgradeEnabled, \"Upgrade is not enabled yet\");\n        require(\n            peggedTotemTokenImpl != _newPeggedTotemTokenImpl,\n            \"Is already the implementation\"\n        );\n        _setPeggedTotemTokenImpl(_newPeggedTotemTokenImpl);\n        upgradeEnabled = false;\n    }\n\n    function enableUpgrade() external onlyProxyAdmin {\n        upgradeEnabled = true;\n    }\n\n    function disableUpgrade() external onlyProxyAdmin {\n        upgradeEnabled = false;\n    }\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _taxationWallet\n    ) public initializer onlyOwner {\n        ERC20Upgradeable.__ERC20_init_unchained(_name, _symbol);\n        AccessControlUpgradeable.__AccessControl_init();\n\n        AccessControlUpgradeable._setupRole(ADMIN_ROLE, _msgSender());\n        AccessControlUpgradeable._setupRole(SWAPPER_ROLE, _msgSender());\n\n        AccessControlUpgradeable._setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        AccessControlUpgradeable._setRoleAdmin(SWAPPER_ROLE, ADMIN_ROLE);\n\n        taxationWallet = _taxationWallet;\n    }\n\n    function _setPeggedTotemTokenImpl(address _newPeggedTotemTokenImpl)\n        internal\n    {\n        address oldImpl = peggedTotemTokenImpl;\n        peggedTotemTokenImpl = _newPeggedTotemTokenImpl;\n        emit ImplementationUpgraded(oldImpl, peggedTotemTokenImpl);\n    }\n\n    fallback() external payable {\n        address opr = peggedTotemTokenImpl;\n        require(opr != address(0));\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), opr, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/BSCAgent/BSCBridgeAgentProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./BSCBridgeAgentStorageStructure.sol\";\n\ncontract BSCBridgeAgentProxy is BSCBridgeAgentStorageStructure {\n    event ImplementationUpgraded(address oldImpl, address newImpl);\n\n    modifier onlyProxyAdmin() {\n        require(\n            _msgSender() == proxyAdmin,\n            \"can only be called by the proxy admin\"\n        );\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"can only be called by the proxy admin\");\n        _;\n    }\n\n    constructor(address _proxyAdmin) {\n        upgradeEnabled = true;\n        proxyAdmin = _proxyAdmin;\n        owner = _msgSender();\n    }\n\n    function upgradeTo(address _newBSCBridgeAgentImpl) external onlyOwner {\n        require(upgradeEnabled, \"Upgrade is not enabled yet\");\n        require(\n            bscBridgeAgentImpl != _newBSCBridgeAgentImpl,\n            \"Is already the implementation\"\n        );\n        _setBSCBridgeAgentImpl(_newBSCBridgeAgentImpl);\n        upgradeEnabled = false;\n    }\n\n    function enableUpgrade() external onlyProxyAdmin {\n        upgradeEnabled = true;\n    }\n\n    function disableUpgrade() external onlyProxyAdmin {\n        upgradeEnabled = false;\n    }\n\n    function initialize(\n        address _pancakeswapRouter,\n        address _pancakePair,\n        address _wbnb,\n        address _totemToken,\n        uint256 _slippagePercentage\n    ) public initializer onlyOwner {\n        ContextUpgradeable.__Context_init();\n\n        pancakeswapRouter = _pancakeswapRouter;\n        pancakePair = _pancakePair;\n        wbnb = _wbnb;\n        totemToken = _totemToken;\n\n        slippagePercentage = _slippagePercentage;\n    }\n\n    function _setBSCBridgeAgentImpl(address _newBSCBridgeAgentImpl) internal {\n        address oldImpl = bscBridgeAgentImpl;\n        bscBridgeAgentImpl = _newBSCBridgeAgentImpl;\n        emit ImplementationUpgraded(oldImpl, bscBridgeAgentImpl);\n    }\n\n    fallback() external payable {\n        address opr = bscBridgeAgentImpl;\n        require(opr != address(0));\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), opr, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/PeggedToken/PeggedTotemTokenImpl.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./PeggedTotemTokenStorageStructure.sol\";\n\ncontract PeggedTotemTokenImpl is PeggedTotemTokenStorageStructure {\n    using BasisPoints for uint256;\n\n    function setLocker(address _locker) external onlyRole(ADMIN_ROLE) {\n        require(_locker != address(0), \"_locker cannot be address(0)\");\n        locker = ILocker(_locker);\n        emit SetLocker(_locker);\n    }\n\n    function setTaxRate(uint256 newTaxRate) public onlyRole(ADMIN_ROLE) {\n        require(newTaxRate < 10000, \"Tax connot be over 100% (10000 BP)\");\n        taxRate = newTaxRate;\n    }\n\n    function setTaxExemptStatus(address account, bool status)\n        public\n        onlyRole(ADMIN_ROLE)\n    {\n        require(account != address(0));\n        taxExempt[account] = status;\n    }\n\n    function setTaxationWallet(address newTaxationWallet)\n        public\n        onlyRole(ADMIN_ROLE)\n    {\n        require(newTaxationWallet != address(0));\n        taxationWallet = newTaxationWallet;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        require(_msgSender() != recipient, \"ERC20: cannot self transfer\");\n        !taxExempt[_msgSender()]\n            ? _transferWithTax(_msgSender(), recipient, amount)\n            : _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        !taxExempt[sender]\n            ? _transferWithTax(sender, recipient, amount)\n            : _transfer(sender, recipient, amount);\n\n        require(\n            allowance(sender, _msgSender()) - amount >= 0,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n\n        unchecked {\n            _approve(\n                sender,\n                _msgSender(),\n                allowance(sender, _msgSender()) - amount\n            );\n        }\n\n        return true;\n    }\n\n    function mintTo(address recipient, uint256 amount)\n        public\n        onlyRole(SWAPPER_ROLE)\n        returns (bool)\n    {\n        _mint(recipient, amount);\n        return true;\n    }\n\n    function burnFrom(address account, uint256 amount)\n        public\n        onlyRole(SWAPPER_ROLE)\n        returns (bool)\n    {\n        _burn(account, amount);\n\n        require(\n            allowance(account, _msgSender()) - amount >= 0,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n\n        unchecked {\n            _approve(\n                account,\n                _msgSender(),\n                allowance(account, _msgSender()) - amount\n            );\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal override {\n        if (address(locker) != address(0)) {\n            locker.lockOrGetPenalty(sender, recipient);\n        }\n        super._transfer(sender, recipient, amount);\n    }\n\n    function _transferWithTax(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(sender != recipient, \"Cannot self transfer\");\n\n        uint256 tax = amount.mulBP(taxRate);\n\n        require(amount >= tax, \"ERC20: tax exceeds amount\");\n\n        uint256 tokensToTransfer;\n        unchecked {\n            tokensToTransfer = amount - tax;\n        }\n\n        _transfer(sender, taxationWallet, tax);\n        _transfer(sender, recipient, tokensToTransfer);\n    }\n}\n"
    },
    "contracts/MetisAgent/MetisBridgeAgentImpl.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./MetisBridgeAgentStorageStructure.sol\";\nimport \"../interfaces/IMetisBridgeAgent.sol\";\n\ncontract MetisBridgeAgentImpl is\n    MetisBridgeAgentStorageStructure,\n    IMetisBridgeAgent\n{\n    using SafeERC20Upgradeable for IPeggedTotemToken;\n\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"can only be called by the proxy admin\");\n        _;\n    }\n\n    modifier notContract() {\n        require(!isContract(msg.sender), \"contract is not allowed to swap\");\n        require(msg.sender == tx.origin, \"no proxy contract is allowed\");\n        _;\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n\n    function pegInMTS2TOTM(Message memory message, bytes memory signature)\n        external\n        payable\n        notContract\n    {\n        require(msg.value >= message.amount, \"wrong metis amount\");\n        require(\n            _msgSender() == message.account,\n            \"user is not allowed to use this signature\"\n        );\n\n        require(\n            VerifySignature.verify(owner, message, domain, signature),\n            \"Wrong transaction\"\n        );\n\n        require(message.deadline >= block.timestamp, \"deadline has passed\");\n        require(message.nonce == swapNonce[msg.sender] + 1, \"wrong nonce\");\n\n        SwapData memory swapData = SwapData({\n            txHash: 0x00,\n            nonce: message.nonce,\n            exchange: message.exchange,\n            swapType: message.swapType,\n            isFilled: false,\n            isClaimed: false\n        });\n\n        bytes32 dataHash = _getDataHash(message);\n        swapDataMap[message.account][dataHash] = swapData;\n\n        swapNonce[_msgSender()] = message.nonce;\n\n        emit swapStarted(\n            message.account,\n            dataHash,\n            message.swapType,\n            message.base,\n            message.quote,\n            message.amount,\n            message.fee,\n            message.exchange,\n            message.nonce,\n            message.deadline\n        );\n    }\n\n    function fillMTS2TOTMPegIn(\n        address recipient,\n        bytes32 dataHash,\n        bytes32 bscTxHash,\n        string memory swapType,\n        uint256 fee,\n        uint256 exchange\n    ) external onlyOwner {\n        require(\n            swapDataMap[recipient][dataHash].nonce > 0,\n            \"request not registered\"\n        );\n        require(\n            !swapDataMap[recipient][dataHash].isFilled,\n            \"request already filled\"\n        );\n\n        IPeggedTotemToken(peggedTotemTokenProxy).mintTo(\n            address(this),\n            exchange\n        );\n\n        swapDataMap[recipient][dataHash].txHash = bscTxHash;\n        swapDataMap[recipient][dataHash].isFilled = true;\n        swapDataMap[recipient][dataHash].exchange = exchange;\n\n        emit swapFilled(\n            recipient,\n            bscTxHash,\n            dataHash,\n            swapType,\n            fee,\n            exchange\n        );\n    }\n\n    function claimMTS2TOTMPegIn(bytes32 dataHash) external {\n        require(\n            swapDataMap[_msgSender()][dataHash].nonce > 0,\n            \"request not registered\"\n        );\n        require(\n            !swapDataMap[_msgSender()][dataHash].isClaimed,\n            \"request already claimed\"\n        );\n\n        uint256 amount = swapDataMap[_msgSender()][dataHash].exchange;\n\n        swapDataMap[_msgSender()][dataHash].isClaimed = true;\n\n        IPeggedTotemToken(peggedTotemTokenProxy).safeTransfer(\n            _msgSender(),\n            amount\n        );\n\n        emit swapClaimed(\n            _msgSender(),\n            dataHash,\n            swapDataMap[_msgSender()][dataHash].swapType,\n            swapDataMap[_msgSender()][dataHash].exchange\n        );\n    }\n\n    function mtsBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function mtsWithdraw() external onlyOwner {\n        owner.transfer(mtsBalance());\n    }\n\n    function setNonce(address account, uint256 nonce) external onlyOwner {\n        swapNonce[account] = nonce;\n    }\n\n    function setFill(\n        address account,\n        bytes32 dataHash,\n        bool fillStat\n    ) external onlyOwner {\n        swapDataMap[account][dataHash].isFilled = fillStat;\n    }\n\n    function setClaim(\n        address account,\n        bytes32 dataHash,\n        bool claimStat\n    ) external onlyOwner {\n        swapDataMap[account][dataHash].isClaimed = claimStat;\n    }\n\n    function _getDataHash(Message memory message)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\n                    keccak256(abi.encode(message.swapType)),\n                    keccak256(abi.encode(message.base)),\n                    keccak256(abi.encode(message.quote)),\n                    message.amount,\n                    message.fee,\n                    message.exchange,\n                    message.nonce,\n                    message.deadline,\n                    message.account\n                )\n            );\n    }\n}\n"
    },
    "contracts/interfaces/IMetisBridgeAgent.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"./IMessageStructure.sol\";\n\ninterface IMetisBridgeAgent {\n    event swapStarted(\n        address indexed spender,\n        bytes32 indexed dataHash,\n        string swapType,\n        string base,\n        string quote,\n        uint256 amount,\n        uint256 fee,\n        uint256 exchange,\n        uint256 nonce,\n        uint256 deadline\n    );\n\n    event swapFilled(\n        address indexed recipient,\n        bytes32 indexed bscTxHash,\n        bytes32 indexed dataHash,\n        string swapType,\n        uint256 fee,\n        uint256 exchange\n    );\n\n    event swapClaimed(\n        address indexed recipient,\n        bytes32 indexed dataHash,\n        string swapType,\n        uint256 exchange\n    );\n\n    function pegInMTS2TOTM(\n        IMessageStructure.Message memory message,\n        bytes memory signature\n    ) external payable;\n\n    function fillMTS2TOTMPegIn(\n        address recipient,\n        bytes32 dataHash,\n        bytes32 bscTxHash,\n        string memory swapType,\n        uint256 fee,\n        uint256 exchange\n    ) external;\n\n    function claimMTS2TOTMPegIn(bytes32 dataHash) external;\n\n    function mtsBalance() external returns (uint256);\n\n    function mtsWithdraw() external;\n\n    function setNonce(address, uint256) external;\n\n    function setFill(address account, bytes32 dataHash, bool fillStat) external;\n\n    function setClaim(address account, bytes32 dataHash, bool claimStat) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}