{
  "address": "0x6771D7706185fF19e5648B5cc1f559a31E7Da435",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metisTxHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "swapType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchange",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "swapFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metisTxHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "swapType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "base",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "quote",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchange",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapStarted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bnbBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bnbWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bscBridgeAgentImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "swapType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "base",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quote",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "internalType": "struct IMessageStructure.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "metisTxHash",
          "type": "bytes32"
        }
      ],
      "name": "fillBNB2TOTMPegin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakePair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pancakePair",
          "type": "address"
        }
      ],
      "name": "setPancakePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippagePercentage",
          "type": "uint256"
        }
      ],
      "name": "setSlippagePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippagePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "swapDataMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchange",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "swapType",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapRouterQuery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseReserved",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteReserved",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchange",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totemBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totemToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbnb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xac4bb524c5518fe1a537dab9c402429647825838adb55e31eef72268181aa76b",
  "receipt": {
    "to": null,
    "from": "0x1E8a9D0Bd8C19bB27CBb38A997b16B8373578E8a",
    "contractAddress": "0x6771D7706185fF19e5648B5cc1f559a31E7Da435",
    "transactionIndex": 6,
    "gasUsed": "1194168",
    "logsBloom": "0x
    "blockHash": "0xb1ef42eff5a1127ee78a4b2cd503319a18f18b8cfc75521a1c4ff38e2933058c",
    "transactionHash": "0xac4bb524c5518fe1a537dab9c402429647825838adb55e31eef72268181aa76b",
    "logs": [],
    "blockNumber": 17383585,
    "cumulativeGasUsed": "2049416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "53e3268fb231c187ebcaad68c2941ba8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metisTxHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"swapType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"swapFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metisTxHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"swapType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"base\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"quote\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bscBridgeAgentImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"swapType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"base\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quote\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct IMessageStructure.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"metisTxHash\",\"type\":\"bytes32\"}],\"name\":\"fillBNB2TOTMPegin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakePair\",\"type\":\"address\"}],\"name\":\"setPancakePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippagePercentage\",\"type\":\"uint256\"}],\"name\":\"setSlippagePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippagePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swapDataMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchange\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"swapType\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapRouterQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseReserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteReserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchange\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BSCAgent/BSCBridgeAgentImpl.sol\":\"BSCBridgeAgentImpl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/BSCAgent/BSCBridgeAgentImpl.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./BSCBridgeAgentStorageStructure.sol\\\";\\nimport \\\"../interfaces/IBscBridgeAgent.sol\\\";\\n\\ncontract BSCBridgeAgentImpl is BSCBridgeAgentStorageStructure, IBscBridgeAgent {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == owner, \\\"can only be called by the proxy admin\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!isContract(msg.sender), \\\"contract is not allowed to swap\\\");\\n        require(msg.sender == tx.origin, \\\"no proxy contract is allowed\\\");\\n        _;\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    function fillBNB2TOTMPegin(Message memory message, bytes32 metisTxHash)\\n        external\\n        onlyOwner\\n    {\\n        require(bnbBalance() >= message.amount, \\\"insufficient amount\\\");\\n\\n        require(message.deadline >= block.timestamp, \\\"deadline has passed\\\");\\n\\n        require(\\n            swapDataMap[message.account][metisTxHash].nonce == 0,\\n            \\\"already registered\\\"\\n        );\\n\\n        emit swapStarted(\\n            message.account,\\n            metisTxHash,\\n            message.swapType,\\n            message.base,\\n            message.quote,\\n            message.amount,\\n            message.fee,\\n            message.exchange,\\n            message.nonce,\\n            message.deadline\\n        );\\n\\n        IERC20Upgradeable(wbnb).approve(\\n            address(pancakeswapRouter),\\n            message.amount\\n        );\\n\\n        (, , uint256 exchangeAmount) = swapRouterQuery(message.amount);\\n\\n        uint256 exchangeAmountWithSlippage = exchangeAmount -\\n            (exchangeAmount * slippagePercentage) /\\n            10000;\\n\\n        uint256 totalTotemBalance = totemBalance();\\n\\n        IPancakeRouter02(pancakeswapRouter).swapExactTokensForTokens(\\n            message.amount,\\n            exchangeAmountWithSlippage,\\n            _getPathForWbnb2Totem(),\\n            address(this),\\n            message.deadline\\n        );\\n\\n        message.exchange = totemBalance() - totalTotemBalance; // the exact totem amount that was bought\\n\\n        SwapData memory swapData = SwapData(\\n            message.nonce,\\n            message.exchange,\\n            message.swapType\\n        );\\n\\n        swapDataMap[message.account][metisTxHash] = swapData;\\n\\n        emit swapFilled(\\n            message.account,\\n            metisTxHash,\\n            message.swapType,\\n            message.amount,\\n            message.fee,\\n            message.exchange,\\n            message.nonce\\n        );\\n    }\\n\\n    function swapRouterQuery(uint256 amount)\\n        public\\n        view\\n        returns (\\n            uint256 baseReserved,\\n            uint256 quoteReserved,\\n            uint256 exchange\\n        )\\n    {\\n        uint256[] memory amounts = IPancakeRouter02(pancakeswapRouter)\\n            .getAmountsOut(amount, _getPathForWbnb2Totem());\\n\\n        exchange = amounts[1];\\n\\n        (quoteReserved, baseReserved, ) = IPancakePair(pancakePair)\\n            .getReserves();\\n    }\\n\\n    function _getPathForWbnb2Totem() internal view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = wbnb;\\n        path[1] = totemToken;\\n\\n        return path;\\n    }\\n\\n    function bnbBalance() public view returns (uint256) {\\n        return IERC20Upgradeable(wbnb).balanceOf(address(this));\\n    }\\n\\n    function bnbWithdraw() external onlyOwner {\\n        IERC20Upgradeable(wbnb).safeTransfer(owner, bnbBalance());\\n    }\\n\\n    function totemBalance() public view returns (uint256) {\\n        return IERC20Upgradeable(totemToken).balanceOf(address(this));\\n    }\\n\\n    function setSlippagePercentage(uint256 _slippagePercentage)\\n        external\\n        onlyOwner\\n    {\\n        /// @dev it must be in basis points\\n        slippagePercentage = _slippagePercentage;\\n    }\\n\\n    function setPancakePair(address _pancakePair) external onlyOwner {\\n        pancakePair = _pancakePair;\\n    }\\n}\\n\",\"keccak256\":\"0x9ae1b4e795c68eac40bd3744b6c3aeb630e8df8120793d477434eb1cc0c37402\",\"license\":\"UNLICENSED\"},\"contracts/BSCAgent/BSCBridgeAgentStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../interfaces/IMessageStructure.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter.sol\\\";\\nimport \\\"../interfaces/IPancakePair.sol\\\";\\nimport \\\"../libraries/VerifySignature.sol\\\";\\n\\ncontract BSCBridgeAgentStorageStructure is\\n    IMessageStructure,\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    struct SwapData {\\n        uint256 nonce;\\n        uint256 exchange;\\n        string swapType;\\n    }\\n\\n    address public bscBridgeAgentImpl;\\n    address public proxyAdmin;\\n    address public owner;\\n    address public wbnb;\\n    address public totemToken;\\n    address public pancakeswapRouter;\\n    address public pancakePair;\\n\\n    uint256 public slippagePercentage;\\n\\n    bool public upgradeEnabled;\\n\\n    // Message public message;\\n    // DomainSeparator public domain;\\n\\n    /*\\n     * map (address => mapping(txhash => SwapData)))\\n     */\\n    mapping(address => mapping(bytes32 => SwapData)) public swapDataMap;\\n}\\n\",\"keccak256\":\"0xe07b63bdb32f5b438987561ad9db2f7e6ef071b1cf17e6758c7d8b4fc141727a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBscBridgeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./IMessageStructure.sol\\\";\\n\\ninterface IBscBridgeAgent {\\n    event swapStarted(\\n        address indexed spender,\\n        bytes32 indexed metisTxHash,\\n        string swapType,\\n        string base,\\n        string quote,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 exchange,\\n        uint256 nonce,\\n        uint256 deadline\\n    );\\n\\n    event swapFilled(\\n        address indexed recipient,\\n        bytes32 indexed metisTxHash,\\n        string swapType,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 exchange,\\n        uint256 nonce\\n    );\\n\\n    function fillBNB2TOTMPegin(\\n        IMessageStructure.Message memory message,\\n        bytes32 metisTxHash\\n    ) external;\\n\\n    function swapRouterQuery(uint256 amount)\\n        external\\n        returns (\\n            uint256 baseReserved,\\n            uint256 quoteReserved,\\n            uint256 exchange\\n        );\\n\\n    function bnbBalance() external returns (uint256);\\n\\n    function bnbWithdraw() external;\\n\\n    function totemBalance() external view returns (uint256);\\n\\n    function setSlippagePercentage(uint256 _slippagePercentage) external;\\n\\n    function setPancakePair(address _pancakePair) external;\\n}\\n\",\"keccak256\":\"0x6cbae27b3f9019a1b7adf2564d150ee506410f34e67f84853e90720d757caaf3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMessageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IMessageStructure {\\n    struct Message {\\n        string swapType;\\n        string base; // MTS\\n        string quote; // TOTM\\n        uint256 amount; // metis amount\\n        uint256 fee; // fee in totem\\n        uint256 exchange; // totem amount\\n        uint256 nonce;\\n        uint256 deadline;\\n        address account;    \\n    }\\n\\n    struct DomainSeparator {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n}\\n\",\"keccak256\":\"0x95d91305c27e3d9672c7b7f5854b83c93fbfc3693843cf201f1e94b446290655\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\ninterface IPancakePair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x9994c4ea606c9e6e1c9b650e24850a2e6dab3bc9a7dbcb7bcb19be350f1c8c5f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x40ff7201ca90e848ee6f006c4d114891619f28c21e713d74dc62b1ffc48d0461\",\"license\":\"UNLICENSED\"},\"contracts/libraries/VerifySignature.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IMessageStructure.sol\\\";\\n\\n/* Signature Verification\\n\\nHow to Sign and Verify\\n# Signing\\n1. Create message to sign (according to EIP-712)\\n2. Hash the message\\n3. Sign the hash (off chain, keep your private key secret)\\n\\n# Verify\\n1. Recreate hash from the original message\\n2. Recover signer from signature and hash\\n3. Compare recovered signer to claimed signer\\n*/\\n\\nlibrary VerifySignature {\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    bytes32 private constant MESSAGE_TYPEHASH =\\n        keccak256(\\n            \\\"Bridge(string swapType,address account,string base,string quote,uint256 fee,uint256 amount,uint256 exchange,uint256 deadline,uint256 nonce)\\\"\\n        );\\n\\n    /* 1. Unlock MetaMask account\\n    ethereum.enable()\\n    */\\n\\n    /* 2. Get message hash to sign\\n    getMessageHash(\\n        1000000000000000000000, // amount\\n        30000000000000000, // swap fee\\n        102, // nonce\\n        1646225186, // deadline\\n        0xE1B7906410dF6d52598F8a500EC2F07d6D936b1D, // user\\n        97, // chain id\\n        0xaea5a85255406f5e22f56b4c889f24b4e10562f6, // verifying contract\\n        \\\"TotemFi\\\", // name\\n        \\\"2\\\" // version\\n    )\\n\\n    hash = \\\"0xd4dd7fda400cfe0c0e0f83b0fbdc4d77507dab005c4ccacc4025306664a57ef0\\\"\\n    */\\n    function getMessageHash(\\n        IMessageStructure.Message memory _message,\\n        IMessageStructure.DomainSeparator memory _domain\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    getDomainSeparatorHash(_domain),\\n                    keccak256(\\n                        abi.encodePacked(\\n                            MESSAGE_TYPEHASH,\\n                            keccak256(abi.encode(_message.swapType)),\\n                            _message.account,\\n                            keccak256(abi.encode(_message.base)),\\n                            keccak256(abi.encode(_message.quote)),\\n                            _message.fee,\\n                            _message.amount,\\n                            _message.exchange,\\n                            _message.deadline,\\n                            _message.nonce\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getDomainSeparatorHash(\\n        IMessageStructure.DomainSeparator memory _domain\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(abi.encode(_domain.name)),\\n                    keccak256(abi.encode(_domain.version)),\\n                    _domain.chainId,\\n                    _domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    /* 3. Sign message hash\\n    # using browser\\n    account = \\\"copy paste account of signer here\\\"\\n    ethereum.request({ method: \\\"personal_sign\\\", params: [account, hash]}).then(console.log)\\n\\n    # using web3\\n    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)\\n\\n    Signature will be different for different accounts\\n    \\\"0x94061fd43783e7f9fc4cab8a46d952602695a3c3dad1ac18ea37fe24b70626177d307eed6e9e6cceb21374233512ba08b63a7819d1d76d30e661e658674191351b\\\"\\n\\n    getEthSignedMessageHash is an internal function used by ecrecover() and is not used from outside\\n\\n    */\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    /* 4. Verify signature\\n    signer = 0x1E8a9D0Bd8C19bB27CBb38A997b16B8373578E8a\\n    signature = \\n        \\\"0x94061fd43783e7f9fc4cab8a46d952602695a3c3dad1ac18ea37fe24b70626177d307eed6e9e6cceb21374233512ba08b63a7819d1d76d30e661e658674191351b\\\"\\n        \\n    */\\n    function verify(\\n        address _signer,\\n        IMessageStructure.Message memory _message,\\n        IMessageStructure.DomainSeparator memory _domain,\\n        bytes memory signature\\n    ) internal pure returns (bool) {\\n        bytes32 messageHash = getMessageHash(_message, _domain);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\",\"keccak256\":\"0xac9d25795309b1b28785c9d22412b3ec28978521ff06cb056e4a887527743d93\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506114a3806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a5b601be116100a2578063d013cbe211610071578063d013cbe214610240578063d4fde9c914610248578063db6754ed1461025b578063e2621d591461026e578063e8153c931461027657600080fd5b8063a5b601be146101ca578063a7d6dc1b146101dd578063b8c9d25c146101ff578063c37dcbd41461021257600080fd5b806375bbeee7116100de57806375bbeee71461017f5780638cf0e21e146101875780638d72647e146101a45780638da5cb5b146101b757600080fd5b806303baf066146101105780633e47158c146101255780634452d81c14610155578063635d9a471461016c575b600080fd5b61012361011e366004610dd5565b610289565b005b603454610138906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015e603a5481565b60405190815260200161014c565b61012361017a366004610eeb565b6102ca565b6101236106c2565b603b546101949060ff1681565b604051901515815260200161014c565b603654610138906001600160a01b031681565b603554610138906001600160a01b031681565b6101236101d8366004610ff1565b610722565b6101f06101eb36600461100c565b610777565b60405161014c93929190611092565b603954610138906001600160a01b031681565b610225610220366004610dd5565b61082d565b6040805193845260208401929092529082015260600161014c565b61015e610962565b603354610138906001600160a01b031681565b603854610138906001600160a01b031681565b61015e6109d5565b603754610138906001600160a01b031681565b6035546001600160a01b0316336001600160a01b0316146102c55760405162461bcd60e51b81526004016102bc906110ba565b60405180910390fd5b603a55565b6035546001600160a01b0316336001600160a01b0316146102fd5760405162461bcd60e51b81526004016102bc906110ba565b816060015161030a610962565b101561034e5760405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064016102bc565b428260e0015110156103985760405162461bcd60e51b8152602060048201526013602482015272191958591b1a5b99481a185cc81c185cdcd959606a1b60448201526064016102bc565b6101008201516001600160a01b03166000908152603c60209081526040808320848452909152902054156104035760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b60448201526064016102bc565b808261010001516001600160a01b03167fddbc9ff29a9285afc6faa85774fd182b7d957a0096a14716b88d020717071b1c846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001516040516104709897969594939291906110ff565b60405180910390a3603654603854606084015160405163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291169063095ea7b3906044016020604051808303816000875af11580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f79190611167565b506000610507836060015161082d565b925050506000612710603a548361051e919061119f565b61052891906111be565b61053290836111e0565b9050600061053e6109d5565b60385460608701519192506001600160a01b0316906338ed17399084610562610a06565b308a60e001516040518663ffffffff1660e01b815260040161058895949392919061123b565b6000604051808303816000875af11580156105a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105cf9190810190611277565b50806105d96109d5565b6105e391906111e0565b60a086019081526040805160608101825260c088015181529151602080840191825288518484019081526101008a01516001600160a01b03166000908152603c83528481208a82528352939093208451815591516001830155915180518493610653926002850192910190610d3c565b50905050848661010001516001600160a01b03167f061eaa4b2045ee0ba76d9754efebbb41b3b16198923b4c19afcc434b6136d3b0886000015189606001518a608001518b60a001518c60c001516040516106b295949392919061131d565b60405180910390a3505050505050565b6035546001600160a01b0316336001600160a01b0316146106f55760405162461bcd60e51b81526004016102bc906110ba565b603554610720906001600160a01b031661070d610962565b6036546001600160a01b03169190610a99565b565b6035546001600160a01b0316336001600160a01b0316146107555760405162461bcd60e51b81526004016102bc906110ba565b603980546001600160a01b0319166001600160a01b0392909216919091179055565b603c602090815260009283526040808420909152908252902080546001820154600283018054929391926107aa90611354565b80601f01602080910402602001604051908101604052809291908181526020018280546107d690611354565b80156108235780601f106107f857610100808354040283529160200191610823565b820191906000526020600020905b81548152906001019060200180831161080657829003601f168201915b5050505050905083565b6038546000908190819081906001600160a01b031663d06ca61f86610850610a06565b6040518363ffffffff1660e01b815260040161086d92919061138f565b600060405180830381865afa15801561088a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108b29190810190611277565b9050806001815181106108c7576108c76113a8565b60200260200101519150603960009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094891906113d5565b506001600160701b03908116979116955091935090915050565b6036546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b602060405180830381865afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190611425565b905090565b6037546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240161098f565b60408051600280825260608083018452926000929190602083019080368337505060365482519293506001600160a01b031691839150600090610a4b57610a4b6113a8565b6001600160a01b039283166020918202929092010152603754825191169082906001908110610a7c57610a7c6113a8565b6001600160a01b0390921660209283029190910190910152919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610aeb908490610af0565b505050565b6000610b45826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bc29092919063ffffffff16565b805190915015610aeb5780806020019051810190610b639190611167565b610aeb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102bc565b6060610bd18484600085610bdb565b90505b9392505050565b606082471015610c3c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102bc565b843b610c8a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102bc565b600080866001600160a01b03168587604051610ca6919061143e565b60006040518083038185875af1925050503d8060008114610ce3576040519150601f19603f3d011682016040523d82523d6000602084013e610ce8565b606091505b5091509150610cf8828286610d03565b979650505050505050565b60608315610d12575081610bd4565b825115610d225782518084602001fd5b8160405162461bcd60e51b81526004016102bc919061145a565b828054610d4890611354565b90600052602060002090601f016020900481019282610d6a5760008555610db0565b82601f10610d8357805160ff1916838001178555610db0565b82800160010185558215610db0579182015b82811115610db0578251825591602001919060010190610d95565b50610dbc929150610dc0565b5090565b5b80821115610dbc5760008155600101610dc1565b600060208284031215610de757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715610e2857610e28610dee565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e5757610e57610dee565b604052919050565b600082601f830112610e7057600080fd5b813567ffffffffffffffff811115610e8a57610e8a610dee565b610e9d601f8201601f1916602001610e2e565b818152846020838601011115610eb257600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b0381168114610ee657600080fd5b919050565b60008060408385031215610efe57600080fd5b823567ffffffffffffffff80821115610f1657600080fd5b908401906101208287031215610f2b57600080fd5b610f33610e04565b823582811115610f4257600080fd5b610f4e88828601610e5f565b825250602083013582811115610f6357600080fd5b610f6f88828601610e5f565b602083015250604083013582811115610f8757600080fd5b610f9388828601610e5f565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101009150610fdb828401610ecf565b9181019190915295602094909401359450505050565b60006020828403121561100357600080fd5b610bd482610ecf565b6000806040838503121561101f57600080fd5b61102883610ecf565b946020939093013593505050565b60005b83811015611051578181015183820152602001611039565b83811115611060576000848401525b50505050565b6000815180845261107e816020860160208601611036565b601f01601f19169290920160200192915050565b8381528260208201526060604082015260006110b16060830184611066565b95945050505050565b60208082526025908201527f63616e206f6e6c792062652063616c6c6564206279207468652070726f78792060408201526430b236b4b760d91b606082015260800190565b60006101008083526111138184018c611066565b90508281036020840152611127818b611066565b9050828103604084015261113b818a611066565b60608401989098525050608081019490945260a084019290925260c083015260e0909101529392505050565b60006020828403121561117957600080fd5b81518015158114610bd457600080fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156111b9576111b9611189565b500290565b6000826111db57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156111f2576111f2611189565b500390565b600081518084526020808501945080840160005b838110156112305781516001600160a01b03168752958201959082019060010161120b565b509495945050505050565b85815284602082015260a06040820152600061125a60a08301866111f7565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561128a57600080fd5b825167ffffffffffffffff808211156112a257600080fd5b818501915085601f8301126112b657600080fd5b8151818111156112c8576112c8610dee565b8060051b91506112d9848301610e2e565b81815291830184019184810190888411156112f357600080fd5b938501935b83851015611311578451825293850193908501906112f8565b98975050505050505050565b60a08152600061133060a0830188611066565b90508560208301528460408301528360608301528260808301529695505050505050565b600181811c9082168061136857607f821691505b6020821081141561138957634e487b7160e01b600052602260045260246000fd5b50919050565b828152604060208201526000610bd160408301846111f7565b634e487b7160e01b600052603260045260246000fd5b80516001600160701b0381168114610ee657600080fd5b6000806000606084860312156113ea57600080fd5b6113f3846113be565b9250611401602085016113be565b9150604084015163ffffffff8116811461141a57600080fd5b809150509250925092565b60006020828403121561143757600080fd5b5051919050565b60008251611450818460208701611036565b9190910192915050565b602081526000610bd4602083018461106656fea2646970667358221220f0b55a242ba589c4eb91ea02c019868f4916bee35b7d31919cee3050c5399ae564736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1641,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3571,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "bscBridgeAgentImpl",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3573,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "proxyAdmin",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 3575,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "owner",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 3577,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "wbnb",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 3579,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "totemToken",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 3581,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "pancakeswapRouter",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 3583,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "pancakePair",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 3585,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "slippagePercentage",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 3587,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "upgradeEnabled",
        "offset": 0,
        "slot": "59",
        "type": "t_bool"
      },
      {
        "astId": 3594,
        "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
        "label": "swapDataMap",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(SwapData)3569_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(SwapData)3569_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct BSCBridgeAgentStorageStructure.SwapData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(SwapData)3569_storage)"
      },
      "t_mapping(t_bytes32,t_struct(SwapData)3569_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BSCBridgeAgentStorageStructure.SwapData)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapData)3569_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SwapData)3569_storage": {
        "encoding": "inplace",
        "label": "struct BSCBridgeAgentStorageStructure.SwapData",
        "members": [
          {
            "astId": 3564,
            "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3566,
            "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
            "label": "exchange",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3568,
            "contract": "contracts/BSCAgent/BSCBridgeAgentImpl.sol:BSCBridgeAgentImpl",
            "label": "swapType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}