{
  "address": "0x7Aa7fe998BCB572B4517d81534418556f2323188",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "ImplementationUpgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "disableUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_peggedTotemTokenProxy",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metisBridgeAgentImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "peggedTotemTokenProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "swapDataMap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchange",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "swapType",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isFilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isClaimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swapNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMetisBridgeAgentImpl",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x083dcfdf6dbbd23f3acb6e4b5e8e865b3b0d51eca99b9044fb838055140db3de",
  "receipt": {
    "to": null,
    "from": "0x6aB29B1766256F01df388B3a25d02C24f454020c",
    "contractAddress": "0x7Aa7fe998BCB572B4517d81534418556f2323188",
    "transactionIndex": 0,
    "gasUsed": "5074359",
    "logsBloom": "0x
    "blockHash": "0x46c6c7d1a321054e2679574cb2b27cee888119099e057810f7e8097ec73ca0ab",
    "transactionHash": "0x083dcfdf6dbbd23f3acb6e4b5e8e865b3b0d51eca99b9044fb838055140db3de",
    "logs": [],
    "blockNumber": 1986927,
    "cumulativeGasUsed": "5074359",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x199Ba9ad2CE47272cA2EB4e3D9530AEd09AbDB51"
  ],
  "solcInputHash": "cdaa94df5d40640b6ba2811ed54caff6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"ImplementationUpgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"disableUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_peggedTotemTokenProxy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metisBridgeAgentImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peggedTotemTokenProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swapDataMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchange\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"swapType\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isFilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMetisBridgeAgentImpl\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetisAgent/MetisBridgeAgentProxy.sol\":\"MetisBridgeAgentProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/MetisAgent/MetisBridgeAgentProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./MetisBridgeAgentStorageStructure.sol\\\";\\n\\ncontract MetisBridgeAgentProxy is MetisBridgeAgentStorageStructure {\\n    event ImplementationUpgraded(address oldImpl, address newImpl);\\n\\n    modifier onlyProxyAdmin() {\\n        require(\\n            _msgSender() == proxyAdmin,\\n            \\\"can only be called by the proxy admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == owner, \\\"can only be called by the proxy admin\\\");\\n        _;\\n    }\\n\\n    constructor(address _proxyAdmin) {\\n        upgradeEnabled = true;\\n        proxyAdmin = _proxyAdmin;\\n        owner = payable(_msgSender());\\n    }\\n\\n    function upgradeTo(address _newMetisBridgeAgentImpl) external onlyOwner {\\n        require(upgradeEnabled, \\\"Upgrade is not enabled yet\\\");\\n        require(\\n            metisBridgeAgentImpl != _newMetisBridgeAgentImpl,\\n            \\\"Is already the implementation\\\"\\n        );\\n        _setMetisBridgeAgentImpl(_newMetisBridgeAgentImpl);\\n        upgradeEnabled = false;\\n    }\\n\\n    function enableUpgrade() external onlyProxyAdmin {\\n        upgradeEnabled = true;\\n    }\\n\\n    function disableUpgrade() external onlyProxyAdmin {\\n        upgradeEnabled = false;\\n    }\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _version,\\n        address _peggedTotemTokenProxy\\n    ) public initializer onlyOwner {\\n        ContextUpgradeable.__Context_init();\\n\\n        domain.name = _name;\\n        domain.version = _version;\\n        domain.chainId = block.chainid;\\n        domain.verifyingContract = address(this);\\n\\n        peggedTotemTokenProxy = _peggedTotemTokenProxy;\\n    }\\n\\n    function _setMetisBridgeAgentImpl(address _newMetisBridgeAgentImpl)\\n        internal\\n    {\\n        address oldImpl = metisBridgeAgentImpl;\\n        metisBridgeAgentImpl = _newMetisBridgeAgentImpl;\\n        emit ImplementationUpgraded(oldImpl, metisBridgeAgentImpl);\\n    }\\n\\n    fallback() external payable {\\n        address opr = metisBridgeAgentImpl;\\n        require(opr != address(0));\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), opr, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x51ff6b0c2b772f6be4e2cabdf57cfd1cdd808e621e0ca0509e0ea1e33537268a\",\"license\":\"UNLICENSED\"},\"contracts/MetisAgent/MetisBridgeAgentStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../interfaces/IPeggedTotemToken.sol\\\";\\nimport \\\"../interfaces/IMessageStructure.sol\\\";\\nimport \\\"../libraries/VerifySignature.sol\\\";\\n\\ncontract MetisBridgeAgentStorageStructure is\\n    IMessageStructure,\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    struct SwapData {\\n        bytes32 txHash;\\n        uint256 nonce;\\n        uint256 exchange;\\n        string swapType;\\n        bool isFilled;\\n        bool isClaimed;\\n    }\\n\\n    address public metisBridgeAgentImpl;\\n    address public proxyAdmin;\\n    address public peggedTotemTokenProxy;\\n    address payable public owner;\\n\\n    bool public upgradeEnabled;\\n\\n    // Message public message;\\n    DomainSeparator public domain;\\n\\n    mapping(address => uint256) public swapNonce;\\n    /**\\n     * @dev This will be set to true if the required amount of pTOTM is minted for the user\\n     *      the txn hash is from the fillPegIn function from BSCBridgeAgent\\n     *\\n     * map (address => mapping(dataHash => SwapData)))\\n     */\\n    mapping(address => mapping(bytes32 => SwapData)) public swapDataMap;\\n}\\n\",\"keccak256\":\"0xa7903543dd152225aa6d314a942c8753a10738fb3664d2b8e6ed30da989f005e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ILocker {\\n    /**\\n     * @dev Fails if transaction is not allowed.\\n     * Return values can be ignored for AntiBot launches\\n     */\\n    function lockOrGetPenalty(address source, address dest)\\n        external\\n        returns (bool, uint256);\\n}\\n\\ninterface ILockerUser {\\n    function locker() external view returns (ILocker);\\n\\n    /**\\n     * @dev Emitted when setLocker is called.\\n     */\\n    event SetLocker(address indexed locker);\\n}\\n\\n\",\"keccak256\":\"0x34ee3d1779278ecb2d3a7322f54e73a4c68bba729b47c0b3fa891e0ee4223900\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMessageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IMessageStructure {\\n    struct Message {\\n        string swapType;\\n        string base; // MTS\\n        string quote; // TOTM\\n        uint256 amount; // metis amount\\n        uint256 fee; // fee in totem\\n        uint256 exchange; // totem amount\\n        uint256 nonce;\\n        uint256 deadline;\\n        address account;    \\n    }\\n\\n    struct DomainSeparator {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n}\\n\",\"keccak256\":\"0x95d91305c27e3d9672c7b7f5854b83c93fbfc3693843cf201f1e94b446290655\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPeggedTotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"./ILocker.sol\\\";\\n\\ninterface IPeggedTotemToken is\\n    IERC20Upgradeable,\\n    IAccessControlUpgradeable,\\n    ILocker\\n{\\n    function setLocker(address _locker) external;\\n\\n    function setTaxRate(uint256 newTaxRate) external;\\n\\n    function setTaxExemptStatus(address account, bool status) external;\\n\\n    function setTaxationWallet(address newTaxationWallet) external;\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mintTo(address recipient, uint256 amount) external returns (bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd273eb29a043438d169410fdff5846b50f14e56b302a2925216a77432fa03c65\",\"license\":\"UNLICENSED\"},\"contracts/libraries/VerifySignature.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IMessageStructure.sol\\\";\\n\\nlibrary VerifySignature {\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    bytes32 private constant MESSAGE_TYPEHASH =\\n        keccak256(\\n            \\\"Bridge(string swapType,address account,string base,string quote,uint256 fee,uint256 amount,uint256 exchange,uint256 deadline,uint256 nonce)\\\"\\n        );\\n\\n    function getMessageHash(IMessageStructure.Message memory _message)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MESSAGE_TYPEHASH,\\n                    keccak256(abi.encodePacked(_message.swapType)),\\n                    _message.account,\\n                    keccak256(abi.encodePacked(_message.base)),\\n                    keccak256(abi.encodePacked(_message.quote)),\\n                    _message.fee,\\n                    _message.amount,\\n                    _message.exchange,\\n                    _message.deadline,\\n                    _message.nonce\\n                )\\n            );\\n    }\\n\\n    function getDomainSeparatorHash(\\n        IMessageStructure.DomainSeparator memory _domain\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(abi.encodePacked(_domain.name)),\\n                    keccak256(abi.encodePacked(_domain.version)),\\n                    _domain.chainId,\\n                    _domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _domainHash, bytes32 _messageHash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainHash, _messageHash));\\n    }\\n\\n    function verify(\\n        address _signer,\\n        IMessageStructure.Message memory _message,\\n        IMessageStructure.DomainSeparator memory _domain,\\n        bytes memory signature\\n    ) internal pure returns (bool) {\\n        bytes32 domainHash = getDomainSeparatorHash(_domain);\\n        bytes32 messageHash = getMessageHash(_message);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(\\n            domainHash,\\n            messageHash\\n        );\\n\\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\",\"keccak256\":\"0x32b87194003f60991dc27dfa428340105e3416159b045109683435cb11386393\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d38380380610d3883398101604081905261002f91610071565b60368054603480546001600160a01b03949094166001600160a01b0319909416939093179092556001600160a81b03199091163317600160a01b1790556100a1565b60006020828403121561008357600080fd5b81516001600160a01b038116811461009a57600080fd5b9392505050565b610c88806100b06000396000f3fe6080604052600436106100ab5760003560e01c80638cf0e21e116100645780638cf0e21e146101d05780638da5cb5b146102015780639afad3ed14610221578063a6936d5c14610241578063a7d6dc1b14610261578063c2fb26a614610293576100b2565b8063077f224a146100ec57806328016f9a1461010e5780633659cfe6146101235780633e47158c1461014357806367fc9138146101805780636dbf454714610195576100b2565b366100b257005b6033546001600160a01b0316806100c857600080fd5b3660008037600080366000845af43d6000803e8080156100e7573d6000f35b3d6000fd5b3480156100f857600080fd5b5061010c6101073660046109f1565b6102b8565b005b34801561011a57600080fd5b5061010c6103c0565b34801561012f57600080fd5b5061010c61013e366004610a65565b610408565b34801561014f57600080fd5b50603454610163906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561018c57600080fd5b5061010c61050b565b3480156101a157600080fd5b506101c26101b0366004610a65565b603b6020526000908152604090205481565b604051908152602001610177565b3480156101dc57600080fd5b506036546101f190600160a01b900460ff1681565b6040519015158152602001610177565b34801561020d57600080fd5b50603654610163906001600160a01b031681565b34801561022d57600080fd5b50603354610163906001600160a01b031681565b34801561024d57600080fd5b50603554610163906001600160a01b031681565b34801561026d57600080fd5b5061028161027c366004610a87565b61054d565b60405161017796959493929190610afe565b34801561029f57600080fd5b506102a8610624565b6040516101779493929190610b3d565b600054610100900460ff16806102d1575060005460ff16155b6102f65760405162461bcd60e51b81526004016102ed90610b84565b60405180910390fd5b600054610100900460ff16158015610318576000805461ffff19166101011790555b6036546001600160a01b0316336001600160a01b03161461034b5760405162461bcd60e51b81526004016102ed90610bd2565b61035361075a565b8351610366906037906020870190610899565b50825161037a906038906020860190610899565b5046603955603a8054306001600160a01b031991821617909155603580549091166001600160a01b03841617905580156103ba576000805461ff00191690555b50505050565b6034546001600160a01b0316336001600160a01b0316146103f35760405162461bcd60e51b81526004016102ed90610bd2565b6036805460ff60a01b1916600160a01b179055565b6036546001600160a01b0316336001600160a01b03161461043b5760405162461bcd60e51b81526004016102ed90610bd2565b603654600160a01b900460ff166104945760405162461bcd60e51b815260206004820152601a60248201527f55706772616465206973206e6f7420656e61626c65642079657400000000000060448201526064016102ed565b6033546001600160a01b03828116911614156104f25760405162461bcd60e51b815260206004820152601d60248201527f497320616c72656164792074686520696d706c656d656e746174696f6e00000060448201526064016102ed565b6104fb816107ce565b506036805460ff60a01b19169055565b6034546001600160a01b0316336001600160a01b03161461053e5760405162461bcd60e51b81526004016102ed90610bd2565b6036805460ff60a01b19169055565b603c6020528160005260406000206020528060005260406000206000915091505080600001549080600101549080600201549080600301805461058f90610c17565b80601f01602080910402602001604051908101604052809291908181526020018280546105bb90610c17565b80156106085780601f106105dd57610100808354040283529160200191610608565b820191906000526020600020905b8154815290600101906020018083116105eb57829003601f168201915b5050506004909301549192505060ff8082169161010090041686565b60378054819061063390610c17565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90610c17565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b5050505050908060010180546106c190610c17565b80601f01602080910402602001604051908101604052809291908181526020018280546106ed90610c17565b801561073a5780601f1061070f5761010080835404028352916020019161073a565b820191906000526020600020905b81548152906001019060200180831161071d57829003601f168201915b5050505060028301546003909301549192916001600160a01b0316905084565b600054610100900460ff1680610773575060005460ff16155b61078f5760405162461bcd60e51b81526004016102ed90610b84565b600054610100900460ff161580156107b1576000805461ffff19166101011790555b6107b961082f565b80156107cb576000805461ff00191690555b50565b603380546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f1a5ca99a64512489fd9455e8da426740174107a69292fca0a8b80b08f6f67892910160405180910390a15050565b600054610100900460ff1680610848575060005460ff16155b6108645760405162461bcd60e51b81526004016102ed90610b84565b600054610100900460ff161580156107b9576000805461ffff191661010117905580156107cb576000805461ff001916905550565b8280546108a590610c17565b90600052602060002090601f0160209004810192826108c7576000855561090d565b82601f106108e057805160ff191683800117855561090d565b8280016001018555821561090d579182015b8281111561090d5782518255916020019190600101906108f2565b5061091992915061091d565b5090565b5b80821115610919576000815560010161091e565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261095957600080fd5b813567ffffffffffffffff8082111561097457610974610932565b604051601f8301601f19908116603f0116810190828211818310171561099c5761099c610932565b816040528381528660208588010111156109b557600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146109ec57600080fd5b919050565b600080600060608486031215610a0657600080fd5b833567ffffffffffffffff80821115610a1e57600080fd5b610a2a87838801610948565b94506020860135915080821115610a4057600080fd5b50610a4d86828701610948565b925050610a5c604085016109d5565b90509250925092565b600060208284031215610a7757600080fd5b610a80826109d5565b9392505050565b60008060408385031215610a9a57600080fd5b610aa3836109d5565b946020939093013593505050565b6000815180845260005b81811015610ad757602081850181015186830182015201610abb565b81811115610ae9576000602083870101525b50601f01601f19169290920160200192915050565b86815285602082015284604082015260c060608201526000610b2360c0830186610ab1565b93151560808301525090151560a090910152949350505050565b608081526000610b506080830187610ab1565b8281036020840152610b628187610ab1565b604084019590955250506001600160a01b039190911660609091015292915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526025908201527f63616e206f6e6c792062652063616c6c6564206279207468652070726f78792060408201526430b236b4b760d91b606082015260800190565b600181811c90821680610c2b57607f821691505b60208210811415610c4c57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220316484f112c55ae8c5c9466f2c1ae6586f6836f42f60fe0742ee263657490fc764736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c80638cf0e21e116100645780638cf0e21e146101d05780638da5cb5b146102015780639afad3ed14610221578063a6936d5c14610241578063a7d6dc1b14610261578063c2fb26a614610293576100b2565b8063077f224a146100ec57806328016f9a1461010e5780633659cfe6146101235780633e47158c1461014357806367fc9138146101805780636dbf454714610195576100b2565b366100b257005b6033546001600160a01b0316806100c857600080fd5b3660008037600080366000845af43d6000803e8080156100e7573d6000f35b3d6000fd5b3480156100f857600080fd5b5061010c6101073660046109f1565b6102b8565b005b34801561011a57600080fd5b5061010c6103c0565b34801561012f57600080fd5b5061010c61013e366004610a65565b610408565b34801561014f57600080fd5b50603454610163906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561018c57600080fd5b5061010c61050b565b3480156101a157600080fd5b506101c26101b0366004610a65565b603b6020526000908152604090205481565b604051908152602001610177565b3480156101dc57600080fd5b506036546101f190600160a01b900460ff1681565b6040519015158152602001610177565b34801561020d57600080fd5b50603654610163906001600160a01b031681565b34801561022d57600080fd5b50603354610163906001600160a01b031681565b34801561024d57600080fd5b50603554610163906001600160a01b031681565b34801561026d57600080fd5b5061028161027c366004610a87565b61054d565b60405161017796959493929190610afe565b34801561029f57600080fd5b506102a8610624565b6040516101779493929190610b3d565b600054610100900460ff16806102d1575060005460ff16155b6102f65760405162461bcd60e51b81526004016102ed90610b84565b60405180910390fd5b600054610100900460ff16158015610318576000805461ffff19166101011790555b6036546001600160a01b0316336001600160a01b03161461034b5760405162461bcd60e51b81526004016102ed90610bd2565b61035361075a565b8351610366906037906020870190610899565b50825161037a906038906020860190610899565b5046603955603a8054306001600160a01b031991821617909155603580549091166001600160a01b03841617905580156103ba576000805461ff00191690555b50505050565b6034546001600160a01b0316336001600160a01b0316146103f35760405162461bcd60e51b81526004016102ed90610bd2565b6036805460ff60a01b1916600160a01b179055565b6036546001600160a01b0316336001600160a01b03161461043b5760405162461bcd60e51b81526004016102ed90610bd2565b603654600160a01b900460ff166104945760405162461bcd60e51b815260206004820152601a60248201527f55706772616465206973206e6f7420656e61626c65642079657400000000000060448201526064016102ed565b6033546001600160a01b03828116911614156104f25760405162461bcd60e51b815260206004820152601d60248201527f497320616c72656164792074686520696d706c656d656e746174696f6e00000060448201526064016102ed565b6104fb816107ce565b506036805460ff60a01b19169055565b6034546001600160a01b0316336001600160a01b03161461053e5760405162461bcd60e51b81526004016102ed90610bd2565b6036805460ff60a01b19169055565b603c6020528160005260406000206020528060005260406000206000915091505080600001549080600101549080600201549080600301805461058f90610c17565b80601f01602080910402602001604051908101604052809291908181526020018280546105bb90610c17565b80156106085780601f106105dd57610100808354040283529160200191610608565b820191906000526020600020905b8154815290600101906020018083116105eb57829003601f168201915b5050506004909301549192505060ff8082169161010090041686565b60378054819061063390610c17565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90610c17565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b5050505050908060010180546106c190610c17565b80601f01602080910402602001604051908101604052809291908181526020018280546106ed90610c17565b801561073a5780601f1061070f5761010080835404028352916020019161073a565b820191906000526020600020905b81548152906001019060200180831161071d57829003601f168201915b5050505060028301546003909301549192916001600160a01b0316905084565b600054610100900460ff1680610773575060005460ff16155b61078f5760405162461bcd60e51b81526004016102ed90610b84565b600054610100900460ff161580156107b1576000805461ffff19166101011790555b6107b961082f565b80156107cb576000805461ff00191690555b50565b603380546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f1a5ca99a64512489fd9455e8da426740174107a69292fca0a8b80b08f6f67892910160405180910390a15050565b600054610100900460ff1680610848575060005460ff16155b6108645760405162461bcd60e51b81526004016102ed90610b84565b600054610100900460ff161580156107b9576000805461ffff191661010117905580156107cb576000805461ff001916905550565b8280546108a590610c17565b90600052602060002090601f0160209004810192826108c7576000855561090d565b82601f106108e057805160ff191683800117855561090d565b8280016001018555821561090d579182015b8281111561090d5782518255916020019190600101906108f2565b5061091992915061091d565b5090565b5b80821115610919576000815560010161091e565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261095957600080fd5b813567ffffffffffffffff8082111561097457610974610932565b604051601f8301601f19908116603f0116810190828211818310171561099c5761099c610932565b816040528381528660208588010111156109b557600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146109ec57600080fd5b919050565b600080600060608486031215610a0657600080fd5b833567ffffffffffffffff80821115610a1e57600080fd5b610a2a87838801610948565b94506020860135915080821115610a4057600080fd5b50610a4d86828701610948565b925050610a5c604085016109d5565b90509250925092565b600060208284031215610a7757600080fd5b610a80826109d5565b9392505050565b60008060408385031215610a9a57600080fd5b610aa3836109d5565b946020939093013593505050565b6000815180845260005b81811015610ad757602081850181015186830182015201610abb565b81811115610ae9576000602083870101525b50601f01601f19169290920160200192915050565b86815285602082015284604082015260c060608201526000610b2360c0830186610ab1565b93151560808301525090151560a090910152949350505050565b608081526000610b506080830187610ab1565b8281036020840152610b628187610ab1565b604084019590955250506001600160a01b039190911660609091015292915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526025908201527f63616e206f6e6c792062652063616c6c6564206279207468652070726f78792060408201526430b236b4b760d91b606082015260800190565b600181811c90821680610c2b57607f821691505b60208210811415610c4c57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220316484f112c55ae8c5c9466f2c1ae6586f6836f42f60fe0742ee263657490fc764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1641,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3226,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "metisBridgeAgentImpl",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3228,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "proxyAdmin",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 3230,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "peggedTotemTokenProxy",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 3232,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "owner",
        "offset": 0,
        "slot": "54",
        "type": "t_address_payable"
      },
      {
        "astId": 3234,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "upgradeEnabled",
        "offset": 20,
        "slot": "54",
        "type": "t_bool"
      },
      {
        "astId": 3237,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "domain",
        "offset": 0,
        "slot": "55",
        "type": "t_struct(DomainSeparator)4020_storage"
      },
      {
        "astId": 3241,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "swapNonce",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3249,
        "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
        "label": "swapDataMap",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(SwapData)3224_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(SwapData)3224_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct MetisBridgeAgentStorageStructure.SwapData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(SwapData)3224_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(SwapData)3224_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MetisBridgeAgentStorageStructure.SwapData)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapData)3224_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DomainSeparator)4020_storage": {
        "encoding": "inplace",
        "label": "struct IMessageStructure.DomainSeparator",
        "members": [
          {
            "astId": 4013,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4015,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "version",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4017,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4019,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "verifyingContract",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SwapData)3224_storage": {
        "encoding": "inplace",
        "label": "struct MetisBridgeAgentStorageStructure.SwapData",
        "members": [
          {
            "astId": 3213,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "txHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3215,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "nonce",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3217,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "exchange",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3219,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "swapType",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3221,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "isFilled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 3223,
            "contract": "contracts/MetisAgent/MetisBridgeAgentProxy.sol:MetisBridgeAgentProxy",
            "label": "isClaimed",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}